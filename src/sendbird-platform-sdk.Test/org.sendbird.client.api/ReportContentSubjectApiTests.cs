/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird-platform-sdk.Client;
using sendbird-platform-sdk.org.sendbird.client.api;
using sendbird-platform-sdk.Model;

namespace sendbird-platform-sdk.Test
{
    /// <summary>
    ///  Class for testing ReportContentSubjectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReportContentSubjectApiTests
    {
        private ReportContentSubjectApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportContentSubjectApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportContentSubjectApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ReportContentSubjectApi
            //Assert.IsInstanceOf(typeof(ReportContentSubjectApi), instance);
        }

        
        /// <summary>
        /// Test ListReports
        /// </summary>
        [Test]
        public void ListReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //int? startTs = null;
            //int? endTs = null;
            //var response = instance.ListReports(apiToken, token, limit, startTs, endTs);
            //Assert.IsInstanceOf(typeof(InlineResponse20070), response, "response is InlineResponse20070");
        }
        
        /// <summary>
        /// Test ListReportsOnChannelByUrl
        /// </summary>
        [Test]
        public void ListReportsOnChannelByUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnChannelByUrl(channelType, channelUrl, apiToken, token, limit);
            //Assert.IsInstanceOf(typeof(InlineResponse20071), response, "response is InlineResponse20071");
        }
        
        /// <summary>
        /// Test ListReportsOnMessageById
        /// </summary>
        [Test]
        public void ListReportsOnMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnMessageById(channelType, channelUrl, messageId, apiToken, token, limit);
            //Assert.IsInstanceOf(typeof(InlineResponse20071), response, "response is InlineResponse20071");
        }
        
        /// <summary>
        /// Test ListReportsOnUserById
        /// </summary>
        [Test]
        public void ListReportsOnUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offendingUserId = null;
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnUserById(offendingUserId, apiToken, token, limit);
            //Assert.IsInstanceOf(typeof(InlineResponse20071), response, "response is InlineResponse20071");
        }
        
        /// <summary>
        /// Test ReportChannelByUrl
        /// </summary>
        [Test]
        public void ReportChannelByUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string apiToken = null;
            //ReportChannelByUrlData reportChannelByUrlData = null;
            //var response = instance.ReportChannelByUrl(channelType, channelUrl, apiToken, reportChannelByUrlData);
            //Assert.IsInstanceOf(typeof(InlineResponse20071ReportLogs), response, "response is InlineResponse20071ReportLogs");
        }
        
        /// <summary>
        /// Test ReportMessageById
        /// </summary>
        [Test]
        public void ReportMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //string apiToken = null;
            //ReportMessageByIdData reportMessageByIdData = null;
            //var response = instance.ReportMessageById(channelType, channelUrl, messageId, apiToken, reportMessageByIdData);
            //Assert.IsInstanceOf(typeof(InlineResponse20071ReportLogs), response, "response is InlineResponse20071ReportLogs");
        }
        
        /// <summary>
        /// Test ReportUserById
        /// </summary>
        [Test]
        public void ReportUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offendingUserId = null;
            //string apiToken = null;
            //ReportUserByIdData reportUserByIdData = null;
            //var response = instance.ReportUserById(offendingUserId, apiToken, reportUserByIdData);
            //Assert.IsInstanceOf(typeof(InlineResponse20071ReportLogs), response, "response is InlineResponse20071ReportLogs");
        }
        
        /// <summary>
        /// Test ViewModeratedMessageById
        /// </summary>
        [Test]
        public void ViewModeratedMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //string apiToken = null;
            //var response = instance.ViewModeratedMessageById(channelType, channelUrl, messageId, apiToken);
            //Assert.IsInstanceOf(typeof(Dictionary<string, string>), response, "response is Dictionary<string, string>");
        }
        
    }

}
