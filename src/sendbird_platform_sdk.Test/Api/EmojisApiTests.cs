/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing EmojisApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EmojisApiTests
    {
        private EmojisApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EmojisApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EmojisApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' EmojisApi
            //Assert.IsInstanceOf(typeof(EmojisApi), instance);
        }

        
        /// <summary>
        /// Test AddEmojiCategories
        /// </summary>
        [Test]
        public void AddEmojiCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //Object body = null;
            //var response = instance.AddEmojiCategories(apiToken, body);
            //Assert.IsInstanceOf(typeof(InlineResponse20057), response, "response is InlineResponse20057");
        }
        
        /// <summary>
        /// Test AddEmojis
        /// </summary>
        [Test]
        public void AddEmojisTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //AddEmojisData addEmojisData = null;
            //var response = instance.AddEmojis(apiToken, addEmojisData);
            //Assert.IsInstanceOf(typeof(InlineResponse20059), response, "response is InlineResponse20059");
        }
        
        /// <summary>
        /// Test DeleteEmojiByKey
        /// </summary>
        [Test]
        public void DeleteEmojiByKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiKey = null;
            //string apiToken = null;
            //instance.DeleteEmojiByKey(emojiKey, apiToken);
            
        }
        
        /// <summary>
        /// Test DeleteEmojiCategoryById
        /// </summary>
        [Test]
        public void DeleteEmojiCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiCategoryId = null;
            //string apiToken = null;
            //instance.DeleteEmojiCategoryById(emojiCategoryId, apiToken);
            
        }
        
        /// <summary>
        /// Test EnableReactions
        /// </summary>
        [Test]
        public void EnableReactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //EnableReactionsData enableReactionsData = null;
            //var response = instance.EnableReactions(apiToken, enableReactionsData);
            //Assert.IsInstanceOf(typeof(InlineResponse20051), response, "response is InlineResponse20051");
        }
        
        /// <summary>
        /// Test GetEmojiByKey
        /// </summary>
        [Test]
        public void GetEmojiByKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiKey = null;
            //string apiToken = null;
            //var response = instance.GetEmojiByKey(emojiKey, apiToken);
            //Assert.IsInstanceOf(typeof(SendBirdEmoji), response, "response is SendBirdEmoji");
        }
        
        /// <summary>
        /// Test GetEmojiCategoryById
        /// </summary>
        [Test]
        public void GetEmojiCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiCategoryId = null;
            //string apiToken = null;
            //var response = instance.GetEmojiCategoryById(emojiCategoryId, apiToken);
            //Assert.IsInstanceOf(typeof(SendBirdEmojiCategory), response, "response is SendBirdEmojiCategory");
        }
        
        /// <summary>
        /// Test ListAllEmojisAndEmojiCategories
        /// </summary>
        [Test]
        public void ListAllEmojisAndEmojiCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.ListAllEmojisAndEmojiCategories(apiToken);
            //Assert.IsInstanceOf(typeof(InlineResponse20056), response, "response is InlineResponse20056");
        }
        
        /// <summary>
        /// Test ListEmojis
        /// </summary>
        [Test]
        public void ListEmojisTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.ListEmojis(apiToken);
            //Assert.IsInstanceOf(typeof(InlineResponse20058), response, "response is InlineResponse20058");
        }
        
        /// <summary>
        /// Test UpdateEmojiCategoryUrlById
        /// </summary>
        [Test]
        public void UpdateEmojiCategoryUrlByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiCategoryId = null;
            //string apiToken = null;
            //UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = null;
            //var response = instance.UpdateEmojiCategoryUrlById(emojiCategoryId, apiToken, updateEmojiCategoryUrlByIdData);
            //Assert.IsInstanceOf(typeof(SendBirdEmojiCategory), response, "response is SendBirdEmojiCategory");
        }
        
        /// <summary>
        /// Test UpdateEmojiUrlByKey
        /// </summary>
        [Test]
        public void UpdateEmojiUrlByKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiKey = null;
            //string apiToken = null;
            //UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = null;
            //var response = instance.UpdateEmojiUrlByKey(emojiKey, apiToken, updateEmojiUrlByKeyData);
            //Assert.IsInstanceOf(typeof(SendBirdEmoji), response, "response is SendBirdEmoji");
        }
        
        /// <summary>
        /// Test UseDefaultEmojis
        /// </summary>
        [Test]
        public void UseDefaultEmojisTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //UseDefaultEmojisData useDefaultEmojisData = null;
            //var response = instance.UseDefaultEmojis(apiToken, useDefaultEmojisData);
            //Assert.IsInstanceOf(typeof(InlineResponse20055), response, "response is InlineResponse20055");
        }
        
    }

}
