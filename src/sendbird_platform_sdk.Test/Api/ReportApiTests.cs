/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing ReportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReportApiTests
    {
        private ReportApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ReportApi
            //Assert.IsInstanceOf(typeof(ReportApi), instance);
        }

        
        /// <summary>
        /// Test ListReports
        /// </summary>
        [Test]
        public void ListReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //int? startTs = null;
            //int? endTs = null;
            //var response = instance.ListReports(apiToken, token, limit, startTs, endTs);
            //Assert.IsInstanceOf(typeof(ListReportsResponse), response, "response is ListReportsResponse");
        }
        
        /// <summary>
        /// Test ListReportsOnChannelByUrl
        /// </summary>
        [Test]
        public void ListReportsOnChannelByUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string channelType = null;
            //string channelUrl = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnChannelByUrl(apiToken, channelType, channelUrl, token, limit);
            //Assert.IsInstanceOf(typeof(ListReportsOnChannelByUrlResponse), response, "response is ListReportsOnChannelByUrlResponse");
        }
        
        /// <summary>
        /// Test ListReportsOnMessageById
        /// </summary>
        [Test]
        public void ListReportsOnMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnMessageById(apiToken, channelType, channelUrl, messageId, token, limit);
            //Assert.IsInstanceOf(typeof(ListReportsOnMessageByIdResponse), response, "response is ListReportsOnMessageByIdResponse");
        }
        
        /// <summary>
        /// Test ListReportsOnUserById
        /// </summary>
        [Test]
        public void ListReportsOnUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string offendingUserId = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListReportsOnUserById(apiToken, offendingUserId, token, limit);
            //Assert.IsInstanceOf(typeof(ListReportsOnUserByIdResponse), response, "response is ListReportsOnUserByIdResponse");
        }
        
        /// <summary>
        /// Test ReportChannelByUrl
        /// </summary>
        [Test]
        public void ReportChannelByUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string channelType = null;
            //string channelUrl = null;
            //ReportChannelByUrlData reportChannelByUrlData = null;
            //var response = instance.ReportChannelByUrl(apiToken, channelType, channelUrl, reportChannelByUrlData);
            //Assert.IsInstanceOf(typeof(ReportChannelByUrlResponse), response, "response is ReportChannelByUrlResponse");
        }
        
        /// <summary>
        /// Test ReportMessageById
        /// </summary>
        [Test]
        public void ReportMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //ReportMessageByIdData reportMessageByIdData = null;
            //var response = instance.ReportMessageById(apiToken, channelType, channelUrl, messageId, reportMessageByIdData);
            //Assert.IsInstanceOf(typeof(ReportMessageByIdResponse), response, "response is ReportMessageByIdResponse");
        }
        
        /// <summary>
        /// Test ReportUserById
        /// </summary>
        [Test]
        public void ReportUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string offendingUserId = null;
            //ReportUserByIdData reportUserByIdData = null;
            //var response = instance.ReportUserById(apiToken, offendingUserId, reportUserByIdData);
            //Assert.IsInstanceOf(typeof(ReportUserByIdResponse), response, "response is ReportUserByIdResponse");
        }
        
        /// <summary>
        /// Test ViewModeratedMessageById
        /// </summary>
        [Test]
        public void ViewModeratedMessageByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string channelType = null;
            //string channelUrl = null;
            //string messageId = null;
            //var response = instance.ViewModeratedMessageById(apiToken, channelType, channelUrl, messageId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
