/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing AnnouncementsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AnnouncementsApiTests
    {
        private AnnouncementsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AnnouncementsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AnnouncementsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AnnouncementsApi
            //Assert.IsInstanceOf(typeof(AnnouncementsApi), instance);
        }

        
        /// <summary>
        /// Test GetDetailedOpenRateOfAnnouncementById
        /// </summary>
        [Test]
        public void GetDetailedOpenRateOfAnnouncementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uniqueId = null;
            //string apiToken = null;
            //var response = instance.GetDetailedOpenRateOfAnnouncementById(uniqueId, apiToken);
            //Assert.IsInstanceOf(typeof(GetDetailedOpenRateOfAnnouncementByIdResponse), response, "response is GetDetailedOpenRateOfAnnouncementByIdResponse");
        }
        
        /// <summary>
        /// Test GetDetailedOpenRateOfAnnouncementGroup
        /// </summary>
        [Test]
        public void GetDetailedOpenRateOfAnnouncementGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string announcementGroup = null;
            //string apiToken = null;
            //var response = instance.GetDetailedOpenRateOfAnnouncementGroup(announcementGroup, apiToken);
            //Assert.IsInstanceOf(typeof(GetDetailedOpenRateOfAnnouncementGroupResponse), response, "response is GetDetailedOpenRateOfAnnouncementGroupResponse");
        }
        
        /// <summary>
        /// Test GetDetailedOpenStatusOfAnnouncementById
        /// </summary>
        [Test]
        public void GetDetailedOpenStatusOfAnnouncementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uniqueId = null;
            //string apiToken = null;
            //int? limit = null;
            //string next = null;
            //List<string> uniqueIds = null;
            //List<string> channelUrls = null;
            //bool? hasOpened = null;
            //var response = instance.GetDetailedOpenStatusOfAnnouncementById(uniqueId, apiToken, limit, next, uniqueIds, channelUrls, hasOpened);
            //Assert.IsInstanceOf(typeof(GetDetailedOpenStatusOfAnnouncementByIdResponse), response, "response is GetDetailedOpenStatusOfAnnouncementByIdResponse");
        }
        
        /// <summary>
        /// Test GetStatistics
        /// </summary>
        [Test]
        public void GetStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.GetStatistics(apiToken);
            //Assert.IsInstanceOf(typeof(GetStatisticsResponse), response, "response is GetStatisticsResponse");
        }
        
        /// <summary>
        /// Test GetStatisticsDaily
        /// </summary>
        [Test]
        public void GetStatisticsDailyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string endDate = null;
            //string startWeek = null;
            //string endWeek = null;
            //string startMonth = null;
            //string endMonth = null;
            //string apiToken = null;
            //string announcementGroup = null;
            //var response = instance.GetStatisticsDaily(startDate, endDate, startWeek, endWeek, startMonth, endMonth, apiToken, announcementGroup);
            //Assert.IsInstanceOf(typeof(GetStatisticsDailyResponse), response, "response is GetStatisticsDailyResponse");
        }
        
        /// <summary>
        /// Test GetStatisticsMonthly
        /// </summary>
        [Test]
        public void GetStatisticsMonthlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.GetStatisticsMonthly(apiToken);
            //Assert.IsInstanceOf(typeof(GetStatisticsMonthlyResponse), response, "response is GetStatisticsMonthlyResponse");
        }
        
        /// <summary>
        /// Test ListAnnouncementGroups
        /// </summary>
        [Test]
        public void ListAnnouncementGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListAnnouncementGroups(apiToken, token, limit);
            //Assert.IsInstanceOf(typeof(ListAnnouncementGroupsResponse), response, "response is ListAnnouncementGroupsResponse");
        }
        
        /// <summary>
        /// Test ListAnnouncements
        /// </summary>
        [Test]
        public void ListAnnouncementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //string order = null;
            //string status = null;
            //string announcementGroup = null;
            //var response = instance.ListAnnouncements(apiToken, token, limit, order, status, announcementGroup);
            //Assert.IsInstanceOf(typeof(ListAnnouncementsResponse), response, "response is ListAnnouncementsResponse");
        }
        
        /// <summary>
        /// Test ScheduleAnnouncement
        /// </summary>
        [Test]
        public void ScheduleAnnouncementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //ScheduleAnnouncementData scheduleAnnouncementData = null;
            //var response = instance.ScheduleAnnouncement(apiToken, scheduleAnnouncementData);
            //Assert.IsInstanceOf(typeof(ScheduleAnnouncementResponse), response, "response is ScheduleAnnouncementResponse");
        }
        
        /// <summary>
        /// Test UpdateAnnouncementById
        /// </summary>
        [Test]
        public void UpdateAnnouncementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uniqueId = null;
            //string apiToken = null;
            //UpdateAnnouncementByIdData updateAnnouncementByIdData = null;
            //var response = instance.UpdateAnnouncementById(uniqueId, apiToken, updateAnnouncementByIdData);
            //Assert.IsInstanceOf(typeof(UpdateAnnouncementByIdResponse), response, "response is UpdateAnnouncementByIdResponse");
        }
        
        /// <summary>
        /// Test ViewAnnouncementById
        /// </summary>
        [Test]
        public void ViewAnnouncementByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uniqueId = null;
            //string apiToken = null;
            //var response = instance.ViewAnnouncementById(uniqueId, apiToken);
            //Assert.IsInstanceOf(typeof(ViewAnnouncementByIdResponse), response, "response is ViewAnnouncementByIdResponse");
        }
        
    }

}
