/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing ApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationApiTests
    {
        private ApplicationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApplicationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApplicationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ApplicationApi
            //Assert.IsInstanceOf(typeof(ApplicationApi), instance);
        }

        
        /// <summary>
        /// Test AddApnsPushConfiguration
        /// </summary>
        [Test]
        public void AddApnsPushConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //AddApnsPushConfigurationData addApnsPushConfigurationData = null;
            //var response = instance.AddApnsPushConfiguration(apiToken, addApnsPushConfigurationData);
            //Assert.IsInstanceOf(typeof(AddApnsPushConfigurationResponse), response, "response is AddApnsPushConfigurationResponse");
        }
        
        /// <summary>
        /// Test AddFcmPushConfiguration
        /// </summary>
        [Test]
        public void AddFcmPushConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //AddFcmPushConfigurationData addFcmPushConfigurationData = null;
            //var response = instance.AddFcmPushConfiguration(apiToken, addFcmPushConfigurationData);
            //Assert.IsInstanceOf(typeof(AddFcmPushConfigurationResponse), response, "response is AddFcmPushConfigurationResponse");
        }
        
        /// <summary>
        /// Test AddHmsPushConfiguration
        /// </summary>
        [Test]
        public void AddHmsPushConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //AddHmsPushConfigurationData addHmsPushConfigurationData = null;
            //var response = instance.AddHmsPushConfiguration(apiToken, addHmsPushConfigurationData);
            //Assert.IsInstanceOf(typeof(AddHmsPushConfigurationResponse), response, "response is AddHmsPushConfigurationResponse");
        }
        
        /// <summary>
        /// Test AddIpToWhitelist
        /// </summary>
        [Test]
        public void AddIpToWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //AddIpToWhitelistData addIpToWhitelistData = null;
            //var response = instance.AddIpToWhitelist(apiToken, addIpToWhitelistData);
            //Assert.IsInstanceOf(typeof(AddIpToWhitelistResponse), response, "response is AddIpToWhitelistResponse");
        }
        
        /// <summary>
        /// Test BanUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void BanUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = null;
            //var response = instance.BanUsersInChannelsWithCustomChannelType(apiToken, customType, banUsersInChannelsWithCustomChannelTypeData);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteAllowedIpsFromWhitelist
        /// </summary>
        [Test]
        public void DeleteAllowedIpsFromWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //List<string> ipWhitelistAddresses = null;
            //var response = instance.DeleteAllowedIpsFromWhitelist(apiToken, ipWhitelistAddresses);
            //Assert.IsInstanceOf(typeof(DeleteAllowedIpsFromWhitelistResponse), response, "response is DeleteAllowedIpsFromWhitelistResponse");
        }
        
        /// <summary>
        /// Test DeleteApnsCertificateById
        /// </summary>
        [Test]
        public void DeleteApnsCertificateByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string providerId = null;
            //var response = instance.DeleteApnsCertificateById(apiToken, providerId);
            //Assert.IsInstanceOf(typeof(DeleteApnsCertificateByIdResponse), response, "response is DeleteApnsCertificateByIdResponse");
        }
        
        /// <summary>
        /// Test GenerateSecondaryApiToken
        /// </summary>
        [Test]
        public void GenerateSecondaryApiTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //GenerateSecondaryApiTokenData generateSecondaryApiTokenData = null;
            //var response = instance.GenerateSecondaryApiToken(apiToken, generateSecondaryApiTokenData);
            //Assert.IsInstanceOf(typeof(GenerateSecondaryApiTokenResponse), response, "response is GenerateSecondaryApiTokenResponse");
        }
        
        /// <summary>
        /// Test ListBannedUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void ListBannedUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListBannedUsersInChannelsWithCustomChannelType(apiToken, customType, token, limit);
            //Assert.IsInstanceOf(typeof(CustomTypeListBannedUsersResponse), response, "response is CustomTypeListBannedUsersResponse");
        }
        
        /// <summary>
        /// Test ListMutedUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void ListMutedUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //string token = null;
            //int? limit = null;
            //var response = instance.ListMutedUsersInChannelsWithCustomChannelType(apiToken, customType, token, limit);
            //Assert.IsInstanceOf(typeof(ListMutedUsersInChannelsWithCustomChannelType200Response), response, "response is ListMutedUsersInChannelsWithCustomChannelType200Response");
        }
        
        /// <summary>
        /// Test ListPushConfigurations
        /// </summary>
        [Test]
        public void ListPushConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string pushType = null;
            //var response = instance.ListPushConfigurations(apiToken, pushType);
            //Assert.IsInstanceOf(typeof(ListPushConfigurationsResponse), response, "response is ListPushConfigurationsResponse");
        }
        
        /// <summary>
        /// Test ListPushNotificationContentTemplates
        /// </summary>
        [Test]
        public void ListPushNotificationContentTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.ListPushNotificationContentTemplates(apiToken);
            //Assert.IsInstanceOf(typeof(ListPushNotificationContentTemplatesResponse), response, "response is ListPushNotificationContentTemplatesResponse");
        }
        
        /// <summary>
        /// Test ListSecondaryApiTokens
        /// </summary>
        [Test]
        public void ListSecondaryApiTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.ListSecondaryApiTokens(apiToken);
            //Assert.IsInstanceOf(typeof(ListSecondaryApiTokensResponse), response, "response is ListSecondaryApiTokensResponse");
        }
        
        /// <summary>
        /// Test MuteUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void MuteUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = null;
            //var response = instance.MuteUsersInChannelsWithCustomChannelType(apiToken, customType, muteUsersInChannelsWithCustomChannelTypeData);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemovePushConfigurationById
        /// </summary>
        [Test]
        public void RemovePushConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string pushType = null;
            //string providerId = null;
            //var response = instance.RemovePushConfigurationById(apiToken, pushType, providerId);
            //Assert.IsInstanceOf(typeof(RemovePushConfigurationByIdResponse), response, "response is RemovePushConfigurationByIdResponse");
        }
        
        /// <summary>
        /// Test RetrieveIpWhitelist
        /// </summary>
        [Test]
        public void RetrieveIpWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.RetrieveIpWhitelist(apiToken);
            //Assert.IsInstanceOf(typeof(RetrieveIpWhitelistResponse), response, "response is RetrieveIpWhitelistResponse");
        }
        
        /// <summary>
        /// Test RevokeSecondaryApiTokenByToken
        /// </summary>
        [Test]
        public void RevokeSecondaryApiTokenByTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string apiToken2 = null;
            //var response = instance.RevokeSecondaryApiTokenByToken(apiToken, apiToken2);
            //Assert.IsInstanceOf(typeof(RevokeSecondaryApiTokenByTokenResponse), response, "response is RevokeSecondaryApiTokenByTokenResponse");
        }
        
        /// <summary>
        /// Test SetDomainFilter
        /// </summary>
        [Test]
        public void SetDomainFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //SetDomainFilterData setDomainFilterData = null;
            //var response = instance.SetDomainFilter(apiToken, customType, setDomainFilterData);
            //Assert.IsInstanceOf(typeof(SendBirdChannelResponse), response, "response is SendBirdChannelResponse");
        }
        
        /// <summary>
        /// Test UnbanUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void UnbanUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //List<string> userIds = null;
            //var response = instance.UnbanUsersInChannelsWithCustomChannelType(apiToken, customType, userIds);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UnmuteUsersInChannelsWithCustomChannelType
        /// </summary>
        [Test]
        public void UnmuteUsersInChannelsWithCustomChannelTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string customType = null;
            //List<string> userIds = null;
            //var response = instance.UnmuteUsersInChannelsWithCustomChannelType(apiToken, customType, userIds);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateApnsPushConfigurationById
        /// </summary>
        [Test]
        public void UpdateApnsPushConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string providerId = null;
            //UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = null;
            //var response = instance.UpdateApnsPushConfigurationById(apiToken, providerId, updateApnsPushConfigurationByIdData);
            //Assert.IsInstanceOf(typeof(UpdateApnsPushConfigurationByIdResponse), response, "response is UpdateApnsPushConfigurationByIdResponse");
        }
        
        /// <summary>
        /// Test UpdateDefaultChannelInvitationPreference
        /// </summary>
        [Test]
        public void UpdateDefaultChannelInvitationPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = null;
            //var response = instance.UpdateDefaultChannelInvitationPreference(apiToken, updateDefaultChannelInvitationPreferenceData);
            //Assert.IsInstanceOf(typeof(UpdateDefaultChannelInvitationPreferenceResponse), response, "response is UpdateDefaultChannelInvitationPreferenceResponse");
        }
        
        /// <summary>
        /// Test UpdateFcmPushConfigurationById
        /// </summary>
        [Test]
        public void UpdateFcmPushConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string providerId = null;
            //UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = null;
            //var response = instance.UpdateFcmPushConfigurationById(apiToken, providerId, updateFcmPushConfigurationByIdData);
            //Assert.IsInstanceOf(typeof(UpdateFcmPushConfigurationByIdResponse), response, "response is UpdateFcmPushConfigurationByIdResponse");
        }
        
        /// <summary>
        /// Test UpdateHmsPushConfigurationById
        /// </summary>
        [Test]
        public void UpdateHmsPushConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string providerId = null;
            //UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = null;
            //var response = instance.UpdateHmsPushConfigurationById(apiToken, providerId, updateHmsPushConfigurationByIdData);
            //Assert.IsInstanceOf(typeof(UpdateHmsPushConfigurationByIdResponse), response, "response is UpdateHmsPushConfigurationByIdResponse");
        }
        
        /// <summary>
        /// Test UpdatePushNotificationContentTemplate
        /// </summary>
        [Test]
        public void UpdatePushNotificationContentTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string templateName = null;
            //UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = null;
            //var response = instance.UpdatePushNotificationContentTemplate(apiToken, templateName, updatePushNotificationContentTemplateData);
            //Assert.IsInstanceOf(typeof(UpdatePushNotificationContentTemplateResponse), response, "response is UpdatePushNotificationContentTemplateResponse");
        }
        
        /// <summary>
        /// Test ViewDefaultChannelInvitationPreference
        /// </summary>
        [Test]
        public void ViewDefaultChannelInvitationPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //var response = instance.ViewDefaultChannelInvitationPreference(apiToken);
            //Assert.IsInstanceOf(typeof(ViewDefaultChannelInvitationPreferenceResponse), response, "response is ViewDefaultChannelInvitationPreferenceResponse");
        }
        
        /// <summary>
        /// Test ViewPushConfigurationById
        /// </summary>
        [Test]
        public void ViewPushConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string pushType = null;
            //string providerId = null;
            //var response = instance.ViewPushConfigurationById(apiToken, pushType, providerId);
            //Assert.IsInstanceOf(typeof(ViewPushConfigurationByIdResponse), response, "response is ViewPushConfigurationByIdResponse");
        }
        
        /// <summary>
        /// Test ViewPushNotificationContentTemplate
        /// </summary>
        [Test]
        public void ViewPushNotificationContentTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string templateName = null;
            //var response = instance.ViewPushNotificationContentTemplate(apiToken, templateName);
            //Assert.IsInstanceOf(typeof(ViewPushNotificationContentTemplateResponse), response, "response is ViewPushNotificationContentTemplateResponse");
        }
        
        /// <summary>
        /// Test ViewSecondaryApiTokenByToken
        /// </summary>
        [Test]
        public void ViewSecondaryApiTokenByTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string apiToken2 = null;
            //var response = instance.ViewSecondaryApiTokenByToken(apiToken, apiToken2);
            //Assert.IsInstanceOf(typeof(ViewSecondaryApiTokenByTokenResponse), response, "response is ViewSecondaryApiTokenByTokenResponse");
        }
        
    }

}
