/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird-platform-sdk.Client;
using sendbird-platform-sdk.Model;

namespace sendbird-platform-sdk.org.sendbird.client.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupChannelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcAcceptInvitation (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData));

        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcAcceptInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData));
        /// <summary>
        /// Ban a user
        /// </summary>
        /// <remarks>
        /// ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <returns>InlineResponse20033BannedList</returns>
        InlineResponse20033BannedList GcBanUser (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData));

        /// <summary>
        /// Ban a user
        /// </summary>
        /// <remarks>
        /// ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033BannedList</returns>
        ApiResponse<InlineResponse20033BannedList> GcBanUserWithHttpInfo (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData));
        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <returns></returns>
        void GcCancelTheRegistrationOfOperators (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?));

        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcCancelTheRegistrationOfOperatorsWithHttpInfo (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?));
        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 GcCheckIfMemberById (string channelUrl, string userId, string apiToken = default(string));

        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> GcCheckIfMemberByIdWithHttpInfo (string channelUrl, string userId, string apiToken = default(string));
        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcCreateChannel (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData));

        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcCreateChannelWithHttpInfo (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData));
        /// <summary>
        /// Decline an invitation
        /// </summary>
        /// <remarks>
        /// ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <returns></returns>
        void GcDeclineInvitation (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData));

        /// <summary>
        /// Decline an invitation
        /// </summary>
        /// <remarks>
        /// ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcDeclineInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData));
        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void GcDeleteChannelByUrl (string channelUrl, string apiToken = default(string));

        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcDeleteChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string));
        /// <summary>
        /// Freeze a channel
        /// </summary>
        /// <remarks>
        /// ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcFreezeChannel (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData));

        /// <summary>
        /// Freeze a channel
        /// </summary>
        /// <remarks>
        /// ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcFreezeChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData));
        /// <summary>
        /// Hide or archive a channel
        /// </summary>
        /// <remarks>
        /// ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <returns></returns>
        void GcHideOrArchiveChannel (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData));

        /// <summary>
        /// Hide or archive a channel
        /// </summary>
        /// <remarks>
        /// ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcHideOrArchiveChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData));
        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcInviteAsMembers (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData));

        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcInviteAsMembersWithHttpInfo (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData));
        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <returns></returns>
        void GcJoinChannel (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData));

        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcJoinChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData));
        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <returns></returns>
        void GcLeaveChannel (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData));

        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcLeaveChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData));
        /// <summary>
        /// List banned users
        /// </summary>
        /// <remarks>
        /// ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GcListBannedUsers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List banned users
        /// </summary>
        /// <remarks>
        /// ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GcListBannedUsersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GcListChannels (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string));

        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GcListChannelsWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 GcListMembers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> GcListMembersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string));
        /// <summary>
        /// List muted users
        /// </summary>
        /// <remarks>
        /// ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GcListMutedUsers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List muted users
        /// </summary>
        /// <remarks>
        /// ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GcListMutedUsersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GcListOperators (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GcListOperatorsWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// Mute a user
        /// </summary>
        /// <remarks>
        /// ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcMuteUser (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData));

        /// <summary>
        /// Mute a user
        /// </summary>
        /// <remarks>
        /// ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcMuteUserWithHttpInfo (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData));
        /// <summary>
        /// Register operators
        /// </summary>
        /// <remarks>
        /// ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 GcRegisterOperators (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData));

        /// <summary>
        /// Register operators
        /// </summary>
        /// <remarks>
        /// ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> GcRegisterOperatorsWithHttpInfo (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData));
        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <returns></returns>
        void GcResetChatHistory (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData));

        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcResetChatHistoryWithHttpInfo (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData));
        /// <summary>
        /// Unban a user
        /// </summary>
        /// <remarks>
        /// ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void GcUnbanUserById (string channelUrl, string bannedUserId, string apiToken = default(string));

        /// <summary>
        /// Unban a user
        /// </summary>
        /// <remarks>
        /// ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcUnbanUserByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string));
        /// <summary>
        /// Unhide or unarchive a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <returns></returns>
        void GcUnhideOrUnarchiveChannel (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?));

        /// <summary>
        /// Unhide or unarchive a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcUnhideOrUnarchiveChannelWithHttpInfo (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?));
        /// <summary>
        /// Unmute a user
        /// </summary>
        /// <remarks>
        /// ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void GcUnmuteUserById (string channelUrl, string mutedUserId, string apiToken = default(string));

        /// <summary>
        /// Unmute a user
        /// </summary>
        /// <remarks>
        /// ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcUnmuteUserByIdWithHttpInfo (string channelUrl, string mutedUserId, string apiToken = default(string));
        /// <summary>
        /// Update a ban
        /// </summary>
        /// <remarks>
        /// ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser GcUpdateBanById (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData));

        /// <summary>
        /// Update a ban
        /// </summary>
        /// <remarks>
        /// ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> GcUpdateBanByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData));
        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcUpdateChannelByUrl (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData));

        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcUpdateChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData));
        /// <summary>
        /// View a ban
        /// </summary>
        /// <remarks>
        /// ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser GcViewBanById (string channelUrl, string bannedUserId, string apiToken = default(string));

        /// <summary>
        /// View a ban
        /// </summary>
        /// <remarks>
        /// ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> GcViewBanByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string));
        /// <summary>
        /// View a channel
        /// </summary>
        /// <remarks>
        /// ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        SendBirdGroupChannel GcViewChannelByUrl (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?));

        /// <summary>
        /// View a channel
        /// </summary>
        /// <remarks>
        /// ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        ApiResponse<SendBirdGroupChannel> GcViewChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?));
        /// <summary>
        /// View a mute
        /// </summary>
        /// <remarks>
        /// ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GcViewMuteById (string channelUrl, string mutedUserId, string apiToken = default(string));

        /// <summary>
        /// View a mute
        /// </summary>
        /// <remarks>
        /// ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GcViewMuteByIdWithHttpInfo (string channelUrl, string mutedUserId, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcAcceptInvitationAsync (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcAcceptInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Ban a user
        /// </summary>
        /// <remarks>
        /// ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20033BannedList</returns>
        System.Threading.Tasks.Task<InlineResponse20033BannedList> GcBanUserAsync (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Ban a user
        /// </summary>
        /// <remarks>
        /// ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20033BannedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033BannedList>> GcBanUserWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcCancelTheRegistrationOfOperatorsAsync (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcCancelTheRegistrationOfOperatorsWithHttpInfoAsync (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> GcCheckIfMemberByIdAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GcCheckIfMemberByIdWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcCreateChannelAsync (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcCreateChannelWithHttpInfoAsync (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Decline an invitation
        /// </summary>
        /// <remarks>
        /// ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcDeclineInvitationAsync (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decline an invitation
        /// </summary>
        /// <remarks>
        /// ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcDeclineInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcDeleteChannelByUrlAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcDeleteChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Freeze a channel
        /// </summary>
        /// <remarks>
        /// ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcFreezeChannelAsync (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Freeze a channel
        /// </summary>
        /// <remarks>
        /// ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcFreezeChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Hide or archive a channel
        /// </summary>
        /// <remarks>
        /// ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcHideOrArchiveChannelAsync (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Hide or archive a channel
        /// </summary>
        /// <remarks>
        /// ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcHideOrArchiveChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcInviteAsMembersAsync (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcInviteAsMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcJoinChannelAsync (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcJoinChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcLeaveChannelAsync (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcLeaveChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List banned users
        /// </summary>
        /// <remarks>
        /// ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GcListBannedUsersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List banned users
        /// </summary>
        /// <remarks>
        /// ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GcListBannedUsersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GcListChannelsAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GcListChannelsWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> GcListMembersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GcListMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List muted users
        /// </summary>
        /// <remarks>
        /// ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GcListMutedUsersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List muted users
        /// </summary>
        /// <remarks>
        /// ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GcListMutedUsersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GcListOperatorsAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GcListOperatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mute a user
        /// </summary>
        /// <remarks>
        /// ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcMuteUserAsync (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mute a user
        /// </summary>
        /// <remarks>
        /// ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcMuteUserWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register operators
        /// </summary>
        /// <remarks>
        /// ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> GcRegisterOperatorsAsync (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register operators
        /// </summary>
        /// <remarks>
        /// ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GcRegisterOperatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcResetChatHistoryAsync (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcResetChatHistoryWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unban a user
        /// </summary>
        /// <remarks>
        /// ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcUnbanUserByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unban a user
        /// </summary>
        /// <remarks>
        /// ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcUnbanUserByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unhide or unarchive a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcUnhideOrUnarchiveChannelAsync (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unhide or unarchive a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcUnhideOrUnarchiveChannelWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unmute a user
        /// </summary>
        /// <remarks>
        /// ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcUnmuteUserByIdAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unmute a user
        /// </summary>
        /// <remarks>
        /// ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcUnmuteUserByIdWithHttpInfoAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a ban
        /// </summary>
        /// <remarks>
        /// ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> GcUpdateBanByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a ban
        /// </summary>
        /// <remarks>
        /// ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> GcUpdateBanByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcUpdateChannelByUrlAsync (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcUpdateChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a ban
        /// </summary>
        /// <remarks>
        /// ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> GcViewBanByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a ban
        /// </summary>
        /// <remarks>
        /// ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> GcViewBanByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a channel
        /// </summary>
        /// <remarks>
        /// ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannel> GcViewChannelByUrlAsync (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a channel
        /// </summary>
        /// <remarks>
        /// ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcViewChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a mute
        /// </summary>
        /// <remarks>
        /// ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GcViewMuteByIdAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a mute
        /// </summary>
        /// <remarks>
        /// ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GcViewMuteByIdWithHttpInfoAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupChannelApi : IGroupChannelApi
    {
        private sendbird-platform-sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupChannelApi(String basePath)
        {
            this.Configuration = new sendbird-platform-sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupChannelApi()
        {
            this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupChannelApi(sendbird-platform-sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird-platform-sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird-platform-sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcAcceptInvitation (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcAcceptInvitationWithHttpInfo(channelUrl, apiToken, gcAcceptInvitationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcAcceptInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcAcceptInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcAcceptInvitationData != null && gcAcceptInvitationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcAcceptInvitationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcAcceptInvitationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcAcceptInvitationAsync (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcAcceptInvitationWithHttpInfoAsync(channelUrl, apiToken, gcAcceptInvitationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a [private](#4-private-vs-public) group channel for a user to join. Since a user is allowed to join up to 2,000 group channels, the invitation to a user who already belongs to a maximum number of group channels will be canceled automatically.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-accept-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcAcceptInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcAcceptInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcAcceptInvitationData gcAcceptInvitationData = default(GcAcceptInvitationData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcAcceptInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcAcceptInvitationData != null && gcAcceptInvitationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcAcceptInvitationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcAcceptInvitationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcAcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Ban a user ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <returns>InlineResponse20033BannedList</returns>
        public InlineResponse20033BannedList GcBanUser (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData))
        {
             ApiResponse<InlineResponse20033BannedList> localVarResponse = GcBanUserWithHttpInfo(channelUrl, apiToken, gcBanUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ban a user ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033BannedList</returns>
        public ApiResponse<InlineResponse20033BannedList> GcBanUserWithHttpInfo (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcBanUser");

            var localVarPath = "/v3/group_channels/{channel_url}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcBanUserData != null && gcBanUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcBanUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcBanUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcBanUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033BannedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033BannedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033BannedList)));
        }

        /// <summary>
        /// Ban a user ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20033BannedList</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033BannedList> GcBanUserAsync (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20033BannedList> localVarResponse = await GcBanUserWithHttpInfoAsync(channelUrl, apiToken, gcBanUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ban a user ## Ban a user  Bans a user from a group channel. A banned user is immediately expelled from a channel and allowed to join the channel again after a set time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-ban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcBanUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20033BannedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033BannedList>> GcBanUserWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcBanUserData gcBanUserData = default(GcBanUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcBanUser");

            var localVarPath = "/v3/group_channels/{channel_url}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcBanUserData != null && gcBanUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcBanUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcBanUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcBanUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033BannedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033BannedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033BannedList)));
        }

        /// <summary>
        /// Cancel the registration of operators ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <returns></returns>
        public void GcCancelTheRegistrationOfOperators (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?))
        {
             GcCancelTheRegistrationOfOperatorsWithHttpInfo(channelUrl, operatorIds, apiToken, deleteAll);
        }

        /// <summary>
        /// Cancel the registration of operators ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcCancelTheRegistrationOfOperatorsWithHttpInfo (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcCancelTheRegistrationOfOperators");
            // verify the required parameter 'operatorIds' is set
            if (operatorIds == null)
                throw new ApiException(400, "Missing required parameter 'operatorIds' when calling GroupChannelApi->GcCancelTheRegistrationOfOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (operatorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operator_ids", operatorIds)); // query parameter
            if (deleteAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_all", deleteAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCancelTheRegistrationOfOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel the registration of operators ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcCancelTheRegistrationOfOperatorsAsync (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcCancelTheRegistrationOfOperatorsWithHttpInfoAsync(channelUrl, operatorIds, apiToken, deleteAll, cancellationToken);

        }

        /// <summary>
        /// Cancel the registration of operators ## Cancel the registration of operators  Cancels the registration of operators from a group channel but leave them as members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-cancel-the-registration-of-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="operatorIds"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcCancelTheRegistrationOfOperatorsWithHttpInfoAsync (string channelUrl, List<string> operatorIds, string apiToken = default(string), bool? deleteAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcCancelTheRegistrationOfOperators");
            // verify the required parameter 'operatorIds' is set
            if (operatorIds == null)
                throw new ApiException(400, "Missing required parameter 'operatorIds' when calling GroupChannelApi->GcCancelTheRegistrationOfOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (operatorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operator_ids", operatorIds)); // query parameter
            if (deleteAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_all", deleteAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCancelTheRegistrationOfOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if member ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 GcCheckIfMemberById (string channelUrl, string userId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20037> localVarResponse = GcCheckIfMemberByIdWithHttpInfo(channelUrl, userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if member ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse<InlineResponse20037> GcCheckIfMemberByIdWithHttpInfo (string channelUrl, string userId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcCheckIfMemberById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->GcCheckIfMemberById");

            var localVarPath = "/v3/group_channels/{channel_url}/members/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCheckIfMemberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        /// Check if member ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037> GcCheckIfMemberByIdAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20037> localVarResponse = await GcCheckIfMemberByIdWithHttpInfoAsync(channelUrl, userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if member ## Check if member  Checks whether the user is a member of the group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-check-if-member - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GcCheckIfMemberByIdWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcCheckIfMemberById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->GcCheckIfMemberById");

            var localVarPath = "/v3/group_channels/{channel_url}/members/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCheckIfMemberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20037>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20037) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20037)));
        }

        /// <summary>
        /// Create a channel ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcCreateChannel (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcCreateChannelWithHttpInfo(apiToken, gcCreateChannelData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a channel ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcCreateChannelWithHttpInfo (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcCreateChannelData != null && gcCreateChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcCreateChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcCreateChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCreateChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Create a channel ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcCreateChannelAsync (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcCreateChannelWithHttpInfoAsync(apiToken, gcCreateChannelData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a channel ## Create a channel  Creates a new group channel.  &gt; If you are creating a 1-on-1 direct messaging channel for a user, it is recommended that you turn on the &#x60;distinct&#x60; property. If the property is turned off, a user can create a new channel even if they have had the previous chat between them, and therefore can&#39;t see previously sent messages or data in the new channel. On the other hand, if the &#x60;distinct&#x60; property is turned on, every 1-on-1 conversation between the same two users occurs within the same channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcCreateChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcCreateChannelWithHttpInfoAsync (string apiToken = default(string), GcCreateChannelData gcCreateChannelData = default(GcCreateChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcCreateChannelData != null && gcCreateChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcCreateChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcCreateChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcCreateChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Decline an invitation ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <returns></returns>
        public void GcDeclineInvitation (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData))
        {
             GcDeclineInvitationWithHttpInfo(channelUrl, apiToken, gcDeclineInvitationData);
        }

        /// <summary>
        /// Decline an invitation ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcDeclineInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcDeclineInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcDeclineInvitationData != null && gcDeclineInvitationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcDeclineInvitationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcDeclineInvitationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcDeclineInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Decline an invitation ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcDeclineInvitationAsync (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcDeclineInvitationWithHttpInfoAsync(channelUrl, apiToken, gcDeclineInvitationData, cancellationToken);

        }

        /// <summary>
        /// Decline an invitation ## Decline an invitation  Declines an invitation for a user to not join a [private](#4-private-vs-public) group channel.  &gt; __Note__: This action is effective only when the &#x60;auto_accept&#x60; property of an application is set to false. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, or [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-decline-an-invitation - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcDeclineInvitationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcDeclineInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcDeclineInvitationData gcDeclineInvitationData = default(GcDeclineInvitationData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcDeclineInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/decline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcDeclineInvitationData != null && gcDeclineInvitationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcDeclineInvitationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcDeclineInvitationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcDeclineInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a channel ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void GcDeleteChannelByUrl (string channelUrl, string apiToken = default(string))
        {
             GcDeleteChannelByUrlWithHttpInfo(channelUrl, apiToken);
        }

        /// <summary>
        /// Delete a channel ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcDeleteChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcDeleteChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcDeleteChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a channel ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcDeleteChannelByUrlAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcDeleteChannelByUrlWithHttpInfoAsync(channelUrl, apiToken, cancellationToken);

        }

        /// <summary>
        /// Delete a channel ## Delete a channel  Deletes a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-delete-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcDeleteChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcDeleteChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcDeleteChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Freeze a channel ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcFreezeChannel (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcFreezeChannelWithHttpInfo(channelUrl, apiToken, gcFreezeChannelData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Freeze a channel ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcFreezeChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcFreezeChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/freeze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcFreezeChannelData != null && gcFreezeChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcFreezeChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcFreezeChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcFreezeChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Freeze a channel ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcFreezeChannelAsync (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcFreezeChannelWithHttpInfoAsync(channelUrl, apiToken, gcFreezeChannelData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Freeze a channel ## Freeze a channel  Freezes or unfreezes a group channel.  &gt; __Note__: Only users designated as channel operators are allowed to talk when a channel is frozen.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-freeze-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcFreezeChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcFreezeChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcFreezeChannelData gcFreezeChannelData = default(GcFreezeChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcFreezeChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/freeze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcFreezeChannelData != null && gcFreezeChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcFreezeChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcFreezeChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcFreezeChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Hide or archive a channel ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <returns></returns>
        public void GcHideOrArchiveChannel (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData))
        {
             GcHideOrArchiveChannelWithHttpInfo(channelUrl, apiToken, gcHideOrArchiveChannelData);
        }

        /// <summary>
        /// Hide or archive a channel ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcHideOrArchiveChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcHideOrArchiveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcHideOrArchiveChannelData != null && gcHideOrArchiveChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcHideOrArchiveChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcHideOrArchiveChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcHideOrArchiveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Hide or archive a channel ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcHideOrArchiveChannelAsync (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcHideOrArchiveChannelWithHttpInfoAsync(channelUrl, apiToken, gcHideOrArchiveChannelData, cancellationToken);

        }

        /// <summary>
        /// Hide or archive a channel ## Hide or archive a channel  Hides or archives a channel from the channel list of either a specific user or entire channel members. Normally, a hidden channel comes back and shows up in the channel list when a member in the channel sends a new message. This automatically-triggered behavior is intended for users who want to temporarily remove a channel from their list because [leaving the channel](#2-leave-the-channel) would delete all the past messages and stored data.  You can also leave out a channel from the list and archive the channel. The channel doesn&#39;t appear even when receiving a new message from other member.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-hide-or-archive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcHideOrArchiveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcHideOrArchiveChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcHideOrArchiveChannelData gcHideOrArchiveChannelData = default(GcHideOrArchiveChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcHideOrArchiveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcHideOrArchiveChannelData != null && gcHideOrArchiveChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcHideOrArchiveChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcHideOrArchiveChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcHideOrArchiveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcInviteAsMembers (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcInviteAsMembersWithHttpInfo(channelUrl, apiToken, gcInviteAsMembersData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcInviteAsMembersWithHttpInfo (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcInviteAsMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcInviteAsMembersData != null && gcInviteAsMembersData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcInviteAsMembersData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcInviteAsMembersData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcInviteAsMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcInviteAsMembersAsync (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcInviteAsMembersWithHttpInfoAsync(channelUrl, apiToken, gcInviteAsMembersData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members into the group channel.  &gt; __Note__: By default, users in your application automatically join a [private](#4-private-vs-public) group channel promptly from an invitation without having to accept it. If you want to give them the option to decide whether to accept or decline an invitation, you should set the value of channel invitation preference to false through the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action. Or using the [update a user&#39;s channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can also allow the option individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcInviteAsMembersData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcInviteAsMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcInviteAsMembersData gcInviteAsMembersData = default(GcInviteAsMembersData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcInviteAsMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcInviteAsMembersData != null && gcInviteAsMembersData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcInviteAsMembersData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcInviteAsMembersData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcInviteAsMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Join a channel ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <returns></returns>
        public void GcJoinChannel (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData))
        {
             GcJoinChannelWithHttpInfo(channelUrl, apiToken, gcJoinChannelData);
        }

        /// <summary>
        /// Join a channel ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcJoinChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcJoinChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcJoinChannelData != null && gcJoinChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcJoinChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcJoinChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcJoinChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Join a channel ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcJoinChannelAsync (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcJoinChannelWithHttpInfoAsync(channelUrl, apiToken, gcJoinChannelData, cancellationToken);

        }

        /// <summary>
        /// Join a channel ## Join a channel  Allows a user to join a [public](#4-private-vs-public) group channel. Since a user is allowed to join up to 2,000 group channels, a user who already belongs to a maximum number of group channels can&#39;t join a new channel.  &gt; __Note__: This action is only permitted for public group channels where the &#x60;is_public&#x60; property is true.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-join-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcJoinChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcJoinChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcJoinChannelData gcJoinChannelData = default(GcJoinChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcJoinChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcJoinChannelData != null && gcJoinChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcJoinChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcJoinChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcJoinChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <returns></returns>
        public void GcLeaveChannel (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData))
        {
             GcLeaveChannelWithHttpInfo(channelUrl, apiToken, gcLeaveChannelData);
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcLeaveChannelWithHttpInfo (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcLeaveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcLeaveChannelData != null && gcLeaveChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcLeaveChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcLeaveChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcLeaveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcLeaveChannelAsync (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcLeaveChannelWithHttpInfoAsync(channelUrl, apiToken, gcLeaveChannelData, cancellationToken);

        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcLeaveChannelData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcLeaveChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcLeaveChannelData gcLeaveChannelData = default(GcLeaveChannelData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcLeaveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcLeaveChannelData != null && gcLeaveChannelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcLeaveChannelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcLeaveChannelData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcLeaveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List banned users ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GcListBannedUsers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20033> localVarResponse = GcListBannedUsersWithHttpInfo(channelUrl, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List banned users ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse<InlineResponse20033> GcListBannedUsersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListBannedUsers");

            var localVarPath = "/v3/group_channels/{channel_url}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListBannedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// List banned users ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> GcListBannedUsersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20033> localVarResponse = await GcListBannedUsersWithHttpInfoAsync(channelUrl, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List banned users ## List banned users  Retrieves a list of the banned users from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-banned-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel where to retrieve a list of banned users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GcListBannedUsersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListBannedUsers");

            var localVarPath = "/v3/group_channels/{channel_url}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListBannedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// List channels ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GcListChannels (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string))
        {
             ApiResponse<InlineResponse20017> localVarResponse = GcListChannelsWithHttpInfo(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List channels ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse<InlineResponse20017> GcListChannelsWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_metadata", showMetadata)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (includeSortedMetaarrayInLastMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sorted_metaarray_in_last_message", includeSortedMetaarrayInLastMessage)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (readReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_receipt", readReceipt)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member", member)); // query parameter
            if (isDistinct != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_distinct", isDistinct)); // query parameter
            if (membersIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_in", membersIn)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// List channels ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GcListChannelsAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20017> localVarResponse = await GcListChannelsWithHttpInfoAsync(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, customType, readReceipt, member, isDistinct, membersIn, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List channels ## List channels  Retrieves a list of group channels in the application.  &gt; __Note__: If you want to get a list of a specific user&#39;s group channels, use the [list my group channels](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="isDistinct"> (optional)</param>
        /// <param name="membersIn"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GcListChannelsWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), string customType = default(string), bool? readReceipt = default(bool?), bool? member = default(bool?), bool? isDistinct = default(bool?), string membersIn = default(string), string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_metadata", showMetadata)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (includeSortedMetaarrayInLastMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sorted_metaarray_in_last_message", includeSortedMetaarrayInLastMessage)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (readReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_receipt", readReceipt)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member", member)); // query parameter
            if (isDistinct != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_distinct", isDistinct)); // query parameter
            if (membersIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_in", membersIn)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 GcListMembers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string))
        {
             ApiResponse<InlineResponse20036> localVarResponse = GcListMembersWithHttpInfo(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse<InlineResponse20036> GcListMembersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (mutedMemberFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "muted_member_filter", mutedMemberFilter)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036> GcListMembersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20036> localVarResponse = await GcListMembersWithHttpInfoAsync(channelUrl, apiToken, token, limit, showDeliveryReceipt, showReadReceipt, order, operatorFilter, memberStateFilter, mutedMemberFilter, nicknameStartswith, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-members - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="mutedMemberFilter"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GcListMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string nicknameStartswith = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (mutedMemberFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "muted_member_filter", mutedMemberFilter)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20036>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20036) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20036)));
        }

        /// <summary>
        /// List muted users ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GcListMutedUsers (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20031> localVarResponse = GcListMutedUsersWithHttpInfo(channelUrl, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List muted users ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse<InlineResponse20031> GcListMutedUsersWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListMutedUsers");

            var localVarPath = "/v3/group_channels/{channel_url}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListMutedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// List muted users ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GcListMutedUsersAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20031> localVarResponse = await GcListMutedUsersWithHttpInfoAsync(channelUrl, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List muted users ## List muted users  Retrieves a list of the muted users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-muted-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of muted users.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GcListMutedUsersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListMutedUsers");

            var localVarPath = "/v3/group_channels/{channel_url}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListMutedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// List operators ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GcListOperators (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20034> localVarResponse = GcListOperatorsWithHttpInfo(channelUrl, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List operators ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse<InlineResponse20034> GcListOperatorsWithHttpInfo (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// List operators ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> GcListOperatorsAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20034> localVarResponse = await GcListOperatorsWithHttpInfoAsync(channelUrl, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List operators ## List operators  Retrieves a list of operators of a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-list-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GcListOperatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcListOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Mute a user ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcMuteUser (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcMuteUserWithHttpInfo(channelUrl, apiToken, gcMuteUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mute a user ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcMuteUserWithHttpInfo (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcMuteUser");

            var localVarPath = "/v3/group_channels/{channel_url}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMuteUserData != null && gcMuteUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMuteUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMuteUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMuteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Mute a user ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcMuteUserAsync (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcMuteUserWithHttpInfoAsync(channelUrl, apiToken, gcMuteUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mute a user ## Mute a user  Mutes a user in a group channel. A muted user remains in the channel and is allowed to view the messages, but can&#39;t send any messages until unmuted.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-mute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMuteUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcMuteUserWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMuteUserData gcMuteUserData = default(GcMuteUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcMuteUser");

            var localVarPath = "/v3/group_channels/{channel_url}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMuteUserData != null && gcMuteUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMuteUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMuteUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMuteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Register operators ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 GcRegisterOperators (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData))
        {
             ApiResponse<InlineResponse20038> localVarResponse = GcRegisterOperatorsWithHttpInfo(channelUrl, apiToken, gcRegisterOperatorsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register operators ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse<InlineResponse20038> GcRegisterOperatorsWithHttpInfo (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcRegisterOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcRegisterOperatorsData != null && gcRegisterOperatorsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcRegisterOperatorsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcRegisterOperatorsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcRegisterOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        /// Register operators ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038> GcRegisterOperatorsAsync (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20038> localVarResponse = await GcRegisterOperatorsWithHttpInfoAsync(channelUrl, apiToken, gcRegisterOperatorsData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register operators ## Register operators  Registers one or more operators to a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-register-operators - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcRegisterOperatorsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GcRegisterOperatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcRegisterOperatorsData gcRegisterOperatorsData = default(GcRegisterOperatorsData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcRegisterOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcRegisterOperatorsData != null && gcRegisterOperatorsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcRegisterOperatorsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcRegisterOperatorsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcRegisterOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20038>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20038) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20038)));
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <returns></returns>
        public void GcResetChatHistory (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData))
        {
             GcResetChatHistoryWithHttpInfo(channelUrl, apiToken, gcResetChatHistoryData);
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcResetChatHistoryWithHttpInfo (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcResetChatHistory");

            var localVarPath = "/v3/group_channels/{channel_url}/reset_user_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcResetChatHistoryData != null && gcResetChatHistoryData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcResetChatHistoryData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcResetChatHistoryData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcResetChatHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcResetChatHistoryAsync (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcResetChatHistoryWithHttpInfoAsync(channelUrl, apiToken, gcResetChatHistoryData, cancellationToken);

        }

        /// <summary>
        /// Reset chat history ## Reset chat history  Resets the properties related to a user&#39;s chat history in a group channel, then clears the existing messages in the channel on the user&#39;s side only. A user can no longer see the messages in a group channel once this action is called, but those messages are not deleted from the database of the Sendbird system. All other members in the channel can retrieve and see the messages.  This action simply clears the messages for the user by updating the &#x60;last_message&#x60; and &#x60;read_receipt&#x60; properties of the [channel](#2-types-of-a-channel-3-resource-representation) resource in addition to other internally managed data such as the number of the user&#39;s unread message.  Using the &#x60;reset_all&#x60; property, you can also reset the properties related to all users&#39; chat history in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-reset-chat-history - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcResetChatHistoryData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcResetChatHistoryWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcResetChatHistoryData gcResetChatHistoryData = default(GcResetChatHistoryData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcResetChatHistory");

            var localVarPath = "/v3/group_channels/{channel_url}/reset_user_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcResetChatHistoryData != null && gcResetChatHistoryData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcResetChatHistoryData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcResetChatHistoryData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcResetChatHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unban a user ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void GcUnbanUserById (string channelUrl, string bannedUserId, string apiToken = default(string))
        {
             GcUnbanUserByIdWithHttpInfo(channelUrl, bannedUserId, apiToken);
        }

        /// <summary>
        /// Unban a user ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcUnbanUserByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnbanUserById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcUnbanUserById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnbanUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unban a user ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcUnbanUserByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcUnbanUserByIdWithHttpInfoAsync(channelUrl, bannedUserId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Unban a user ## Unban a user  Unbans a user from a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unban-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcUnbanUserByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnbanUserById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcUnbanUserById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnbanUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unhide or unarchive a channel ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <returns></returns>
        public void GcUnhideOrUnarchiveChannel (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?))
        {
             GcUnhideOrUnarchiveChannelWithHttpInfo(channelUrl, userId, apiToken, shouldUnhideAll);
        }

        /// <summary>
        /// Unhide or unarchive a channel ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcUnhideOrUnarchiveChannelWithHttpInfo (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnhideOrUnarchiveChannel");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->GcUnhideOrUnarchiveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (shouldUnhideAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "should_unhide_all", shouldUnhideAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnhideOrUnarchiveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unhide or unarchive a channel ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcUnhideOrUnarchiveChannelAsync (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcUnhideOrUnarchiveChannelWithHttpInfoAsync(channelUrl, userId, apiToken, shouldUnhideAll, cancellationToken);

        }

        /// <summary>
        /// Unhide or unarchive a channel ## Unhide or unarchive a channel  Makes a hidden or archived channel reappear in the channel list of either a specific user or entire channel members.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unhide-or-unarchive-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcUnhideOrUnarchiveChannelWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), bool? shouldUnhideAll = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnhideOrUnarchiveChannel");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->GcUnhideOrUnarchiveChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (shouldUnhideAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "should_unhide_all", shouldUnhideAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnhideOrUnarchiveChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unmute a user ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void GcUnmuteUserById (string channelUrl, string mutedUserId, string apiToken = default(string))
        {
             GcUnmuteUserByIdWithHttpInfo(channelUrl, mutedUserId, apiToken);
        }

        /// <summary>
        /// Unmute a user ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcUnmuteUserByIdWithHttpInfo (string channelUrl, string mutedUserId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnmuteUserById");
            // verify the required parameter 'mutedUserId' is set
            if (mutedUserId == null)
                throw new ApiException(400, "Missing required parameter 'mutedUserId' when calling GroupChannelApi->GcUnmuteUserById");

            var localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (mutedUserId != null) localVarPathParams.Add("muted_user_id", this.Configuration.ApiClient.ParameterToString(mutedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnmuteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unmute a user ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcUnmuteUserByIdAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcUnmuteUserByIdWithHttpInfoAsync(channelUrl, mutedUserId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Unmute a user ## Unmute a user  Unmutes a user within a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-unmute-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcUnmuteUserByIdWithHttpInfoAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUnmuteUserById");
            // verify the required parameter 'mutedUserId' is set
            if (mutedUserId == null)
                throw new ApiException(400, "Missing required parameter 'mutedUserId' when calling GroupChannelApi->GcUnmuteUserById");

            var localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (mutedUserId != null) localVarPathParams.Add("muted_user_id", this.Configuration.ApiClient.ParameterToString(mutedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUnmuteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a ban ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser GcUpdateBanById (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData))
        {
             ApiResponse<SendBirdUser> localVarResponse = GcUpdateBanByIdWithHttpInfo(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a ban ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> GcUpdateBanByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUpdateBanById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcUpdateBanById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcUpdateBanByIdData != null && gcUpdateBanByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcUpdateBanByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcUpdateBanByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUpdateBanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Update a ban ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> GcUpdateBanByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await GcUpdateBanByIdWithHttpInfoAsync(channelUrl, bannedUserId, apiToken, gcUpdateBanByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a ban ## Update a ban  Updates details of a ban imposed on a user. You can change the length of the ban with this action, and also provide an updated description.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateBanByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> GcUpdateBanByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), GcUpdateBanByIdData gcUpdateBanByIdData = default(GcUpdateBanByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUpdateBanById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcUpdateBanById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcUpdateBanByIdData != null && gcUpdateBanByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcUpdateBanByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcUpdateBanByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUpdateBanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Update a channel ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcUpdateChannelByUrl (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcUpdateChannelByUrlWithHttpInfo(channelUrl, apiToken, gcUpdateChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a channel ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcUpdateChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUpdateChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcUpdateChannelByUrlData != null && gcUpdateChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcUpdateChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcUpdateChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUpdateChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// Update a channel ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcUpdateChannelByUrlAsync (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcUpdateChannelByUrlWithHttpInfoAsync(channelUrl, apiToken, gcUpdateChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a channel ## Update a channel  Updates information on a group channel.  &gt; __Note__: You can&#39;t change the members of the channel here. To do so, see [invite as members](#2-invite-as-members) action below.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-update-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcUpdateChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcUpdateChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcUpdateChannelByUrlData gcUpdateChannelByUrlData = default(GcUpdateChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcUpdateChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcUpdateChannelByUrlData != null && gcUpdateChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcUpdateChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcUpdateChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcUpdateChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// View a ban ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser GcViewBanById (string channelUrl, string bannedUserId, string apiToken = default(string))
        {
             ApiResponse<SendBirdUser> localVarResponse = GcViewBanByIdWithHttpInfo(channelUrl, bannedUserId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a ban ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> GcViewBanByIdWithHttpInfo (string channelUrl, string bannedUserId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewBanById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcViewBanById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewBanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View a ban ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> GcViewBanByIdAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await GcViewBanByIdWithHttpInfoAsync(channelUrl, bannedUserId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a ban ## View a ban  Retrieves details of a ban imposed on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-ban - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="bannedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> GcViewBanByIdWithHttpInfoAsync (string channelUrl, string bannedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewBanById");
            // verify the required parameter 'bannedUserId' is set
            if (bannedUserId == null)
                throw new ApiException(400, "Missing required parameter 'bannedUserId' when calling GroupChannelApi->GcViewBanById");

            var localVarPath = "/v3/group_channels/{channel_url}/ban/{banned_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (bannedUserId != null) localVarPathParams.Add("banned_user_id", this.Configuration.ApiClient.ParameterToString(bannedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewBanById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View a channel ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <returns>SendBirdGroupChannel</returns>
        public SendBirdGroupChannel GcViewChannelByUrl (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = GcViewChannelByUrlWithHttpInfo(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a channel ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannel</returns>
        public ApiResponse<SendBirdGroupChannel> GcViewChannelByUrlWithHttpInfo (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (readReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_receipt", readReceipt)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member", member)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// View a channel ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannel</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannel> GcViewChannelByUrlAsync (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannel> localVarResponse = await GcViewChannelByUrlWithHttpInfoAsync(channelUrl, apiToken, showDeliveryReceipt, showReadReceipt, showMember, readReceipt, member, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a channel ## View a channel  Retrieves information on a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="readReceipt"> (optional)</param>
        /// <param name="member"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannel>> GcViewChannelByUrlWithHttpInfoAsync (string channelUrl, string apiToken = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), bool? readReceipt = default(bool?), bool? member = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewChannelByUrl");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (readReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_receipt", readReceipt)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member", member)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannel)));
        }

        /// <summary>
        /// View a mute ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GcViewMuteById (string channelUrl, string mutedUserId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20035> localVarResponse = GcViewMuteByIdWithHttpInfo(channelUrl, mutedUserId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a mute ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse<InlineResponse20035> GcViewMuteByIdWithHttpInfo (string channelUrl, string mutedUserId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewMuteById");
            // verify the required parameter 'mutedUserId' is set
            if (mutedUserId == null)
                throw new ApiException(400, "Missing required parameter 'mutedUserId' when calling GroupChannelApi->GcViewMuteById");

            var localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (mutedUserId != null) localVarPathParams.Add("muted_user_id", this.Configuration.ApiClient.ParameterToString(mutedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewMuteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        /// View a mute ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> GcViewMuteByIdAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20035> localVarResponse = await GcViewMuteByIdWithHttpInfoAsync(channelUrl, mutedUserId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a mute ## View a mute  Checks if a user is muted in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-view-a-mute - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="mutedUserId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GcViewMuteByIdWithHttpInfoAsync (string channelUrl, string mutedUserId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GcViewMuteById");
            // verify the required parameter 'mutedUserId' is set
            if (mutedUserId == null)
                throw new ApiException(400, "Missing required parameter 'mutedUserId' when calling GroupChannelApi->GcViewMuteById");

            var localVarPath = "/v3/group_channels/{channel_url}/mute/{muted_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (mutedUserId != null) localVarPathParams.Add("muted_user_id", this.Configuration.ApiClient.ParameterToString(mutedUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewMuteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

    }
}
