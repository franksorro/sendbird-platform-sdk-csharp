/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird-platform-sdk.Client.OpenAPIDateConverter;

namespace sendbird-platform-sdk.Model
{
    /// <summary>
    /// SendBirdMember
    /// </summary>
    [DataContract]
    public partial class SendBirdMember :  IEquatable<SendBirdMember>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Operator for value: operator
            /// </summary>
            [EnumMember(Value = "operator")]
            Operator = 2

        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Invited for value: invited
            /// </summary>
            [EnumMember(Value = "invited")]
            Invited = 1,

            /// <summary>
            /// Enum Joined for value: joined
            /// </summary>
            [EnumMember(Value = "joined")]
            Joined = 2

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdMember" /> class.
        /// </summary>
        /// <param name="connectionStatus">connectionStatus.</param>
        /// <param name="friendDiscoveryKey">friendDiscoveryKey.</param>
        /// <param name="friendName">friendName.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isBlockedByMe">isBlockedByMe.</param>
        /// <param name="isBlockingMe">isBlockingMe.</param>
        /// <param name="isMuted">isMuted.</param>
        /// <param name="lastSeenAt">lastSeenAt.</param>
        /// <param name="metaData">metaData.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="plainProfileUrl">plainProfileUrl.</param>
        /// <param name="preferredLanguages">preferredLanguages.</param>
        /// <param name="profileUrl">profileUrl.</param>
        /// <param name="requireAuth">requireAuth.</param>
        /// <param name="restrictionInfo">restrictionInfo.</param>
        /// <param name="role">role.</param>
        /// <param name="state">state.</param>
        /// <param name="userId">userId.</param>
        public SendBirdMember(string connectionStatus = default(string), string friendDiscoveryKey = default(string), string friendName = default(string), bool isActive = default(bool), bool isBlockedByMe = default(bool), bool isBlockingMe = default(bool), bool isMuted = default(bool), int lastSeenAt = default(int), Object metaData = default(Object), string nickname = default(string), string plainProfileUrl = default(string), List<string> preferredLanguages = default(List<string>), string profileUrl = default(string), bool requireAuth = default(bool), SendBirdRestrictionInfo restrictionInfo = default(SendBirdRestrictionInfo), RoleEnum? role = default(RoleEnum?), StateEnum? state = default(StateEnum?), string userId = default(string))
        {
            this.ConnectionStatus = connectionStatus;
            this.FriendDiscoveryKey = friendDiscoveryKey;
            this.FriendName = friendName;
            this.IsActive = isActive;
            this.IsBlockedByMe = isBlockedByMe;
            this.IsBlockingMe = isBlockingMe;
            this.IsMuted = isMuted;
            this.LastSeenAt = lastSeenAt;
            this.MetaData = metaData;
            this.Nickname = nickname;
            this.PlainProfileUrl = plainProfileUrl;
            this.PreferredLanguages = preferredLanguages;
            this.ProfileUrl = profileUrl;
            this.RequireAuth = requireAuth;
            this.RestrictionInfo = restrictionInfo;
            this.Role = role;
            this.State = state;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets ConnectionStatus
        /// </summary>
        [DataMember(Name="connection_status", EmitDefaultValue=false)]
        public string ConnectionStatus { get; set; }

        /// <summary>
        /// Gets or Sets FriendDiscoveryKey
        /// </summary>
        [DataMember(Name="friend_discovery_key", EmitDefaultValue=false)]
        public string FriendDiscoveryKey { get; set; }

        /// <summary>
        /// Gets or Sets FriendName
        /// </summary>
        [DataMember(Name="friend_name", EmitDefaultValue=false)]
        public string FriendName { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsBlockedByMe
        /// </summary>
        [DataMember(Name="is_blocked_by_me", EmitDefaultValue=false)]
        public bool IsBlockedByMe { get; set; }

        /// <summary>
        /// Gets or Sets IsBlockingMe
        /// </summary>
        [DataMember(Name="is_blocking_me", EmitDefaultValue=false)]
        public bool IsBlockingMe { get; set; }

        /// <summary>
        /// Gets or Sets IsMuted
        /// </summary>
        [DataMember(Name="is_muted", EmitDefaultValue=false)]
        public bool IsMuted { get; set; }

        /// <summary>
        /// Gets or Sets LastSeenAt
        /// </summary>
        [DataMember(Name="last_seen_at", EmitDefaultValue=false)]
        public int LastSeenAt { get; set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [DataMember(Name="meta_data", EmitDefaultValue=false)]
        public Object MetaData { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets PlainProfileUrl
        /// </summary>
        [DataMember(Name="plain_profile_url", EmitDefaultValue=false)]
        public string PlainProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLanguages
        /// </summary>
        [DataMember(Name="preferred_languages", EmitDefaultValue=false)]
        public List<string> PreferredLanguages { get; set; }

        /// <summary>
        /// Gets or Sets ProfileUrl
        /// </summary>
        [DataMember(Name="profile_url", EmitDefaultValue=false)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets RequireAuth
        /// </summary>
        [DataMember(Name="require_auth", EmitDefaultValue=false)]
        public bool RequireAuth { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionInfo
        /// </summary>
        [DataMember(Name="restriction_info", EmitDefaultValue=false)]
        public SendBirdRestrictionInfo RestrictionInfo { get; set; }



        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdMember {\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  FriendDiscoveryKey: ").Append(FriendDiscoveryKey).Append("\n");
            sb.Append("  FriendName: ").Append(FriendName).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBlockedByMe: ").Append(IsBlockedByMe).Append("\n");
            sb.Append("  IsBlockingMe: ").Append(IsBlockingMe).Append("\n");
            sb.Append("  IsMuted: ").Append(IsMuted).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  PlainProfileUrl: ").Append(PlainProfileUrl).Append("\n");
            sb.Append("  PreferredLanguages: ").Append(PreferredLanguages).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  RequireAuth: ").Append(RequireAuth).Append("\n");
            sb.Append("  RestrictionInfo: ").Append(RestrictionInfo).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdMember);
        }

        /// <summary>
        /// Returns true if SendBirdMember instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectionStatus == input.ConnectionStatus ||
                    (this.ConnectionStatus != null &&
                    this.ConnectionStatus.Equals(input.ConnectionStatus))
                ) && 
                (
                    this.FriendDiscoveryKey == input.FriendDiscoveryKey ||
                    (this.FriendDiscoveryKey != null &&
                    this.FriendDiscoveryKey.Equals(input.FriendDiscoveryKey))
                ) && 
                (
                    this.FriendName == input.FriendName ||
                    (this.FriendName != null &&
                    this.FriendName.Equals(input.FriendName))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsBlockedByMe == input.IsBlockedByMe ||
                    (this.IsBlockedByMe != null &&
                    this.IsBlockedByMe.Equals(input.IsBlockedByMe))
                ) && 
                (
                    this.IsBlockingMe == input.IsBlockingMe ||
                    (this.IsBlockingMe != null &&
                    this.IsBlockingMe.Equals(input.IsBlockingMe))
                ) && 
                (
                    this.IsMuted == input.IsMuted ||
                    (this.IsMuted != null &&
                    this.IsMuted.Equals(input.IsMuted))
                ) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                ) && 
                (
                    this.MetaData == input.MetaData ||
                    (this.MetaData != null &&
                    this.MetaData.Equals(input.MetaData))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.PlainProfileUrl == input.PlainProfileUrl ||
                    (this.PlainProfileUrl != null &&
                    this.PlainProfileUrl.Equals(input.PlainProfileUrl))
                ) && 
                (
                    this.PreferredLanguages == input.PreferredLanguages ||
                    this.PreferredLanguages != null &&
                    input.PreferredLanguages != null &&
                    this.PreferredLanguages.SequenceEqual(input.PreferredLanguages)
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.RequireAuth == input.RequireAuth ||
                    (this.RequireAuth != null &&
                    this.RequireAuth.Equals(input.RequireAuth))
                ) && 
                (
                    this.RestrictionInfo == input.RestrictionInfo ||
                    (this.RestrictionInfo != null &&
                    this.RestrictionInfo.Equals(input.RestrictionInfo))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionStatus != null)
                    hashCode = hashCode * 59 + this.ConnectionStatus.GetHashCode();
                if (this.FriendDiscoveryKey != null)
                    hashCode = hashCode * 59 + this.FriendDiscoveryKey.GetHashCode();
                if (this.FriendName != null)
                    hashCode = hashCode * 59 + this.FriendName.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsBlockedByMe != null)
                    hashCode = hashCode * 59 + this.IsBlockedByMe.GetHashCode();
                if (this.IsBlockingMe != null)
                    hashCode = hashCode * 59 + this.IsBlockingMe.GetHashCode();
                if (this.IsMuted != null)
                    hashCode = hashCode * 59 + this.IsMuted.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                if (this.MetaData != null)
                    hashCode = hashCode * 59 + this.MetaData.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.PlainProfileUrl != null)
                    hashCode = hashCode * 59 + this.PlainProfileUrl.GetHashCode();
                if (this.PreferredLanguages != null)
                    hashCode = hashCode * 59 + this.PreferredLanguages.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.RequireAuth != null)
                    hashCode = hashCode * 59 + this.RequireAuth.GetHashCode();
                if (this.RestrictionInfo != null)
                    hashCode = hashCode * 59 + this.RestrictionInfo.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
