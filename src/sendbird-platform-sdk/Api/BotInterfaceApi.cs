/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird-platform-sdk.Client;
using sendbird-platform-sdk.Model;

namespace sendbird-platform-sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBotInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        InlineResponse20065Bots CreateBot (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData));

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        ApiResponse<InlineResponse20065Bots> CreateBotWithHttpInfo (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData));
        /// <summary>
        /// Delete a bot
        /// </summary>
        /// <remarks>
        /// ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void DeleteBotById (string botUserid, string apiToken = default(string));

        /// <summary>
        /// Delete a bot
        /// </summary>
        /// <remarks>
        /// ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBotByIdWithHttpInfo (string botUserid, string apiToken = default(string));
        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <returns>SendBirdGroupChannelCollection</returns>
        SendBirdGroupChannelCollection JoinChannels (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData));

        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannelCollection</returns>
        ApiResponse<SendBirdGroupChannelCollection> JoinChannelsWithHttpInfo (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData));
        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <returns></returns>
        void LeaveChannels (string botUserid, string apiToken = default(string), string channelUrl = default(string));

        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveChannelsWithHttpInfo (string botUserid, string apiToken = default(string), string channelUrl = default(string));
        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void LeaveChannelsByUrl (string botUserid, string channelUrl, string apiToken = default(string));

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveChannelsByUrlWithHttpInfo (string botUserid, string channelUrl, string apiToken = default(string));
        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 ListBots (string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> ListBotsWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// Send a bot&#39;s message
        /// </summary>
        /// <remarks>
        /// ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse SendBotsMessage (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData));

        /// <summary>
        /// Send a bot&#39;s message
        /// </summary>
        /// <remarks>
        /// ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> SendBotsMessageWithHttpInfo (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData));
        /// <summary>
        /// Update a bot
        /// </summary>
        /// <remarks>
        /// ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        InlineResponse20065Bots UpdateBotById (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData));

        /// <summary>
        /// Update a bot
        /// </summary>
        /// <remarks>
        /// ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        ApiResponse<InlineResponse20065Bots> UpdateBotByIdWithHttpInfo (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData));
        /// <summary>
        /// View a bot
        /// </summary>
        /// <remarks>
        /// ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        InlineResponse20065Bots ViewBotById (string botUserid, string apiToken = default(string));

        /// <summary>
        /// View a bot
        /// </summary>
        /// <remarks>
        /// ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        ApiResponse<InlineResponse20065Bots> ViewBotByIdWithHttpInfo (string botUserid, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        System.Threading.Tasks.Task<InlineResponse20065Bots> CreateBotAsync (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> CreateBotWithHttpInfoAsync (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a bot
        /// </summary>
        /// <remarks>
        /// ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBotByIdAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a bot
        /// </summary>
        /// <remarks>
        /// ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannelCollection</returns>
        System.Threading.Tasks.Task<SendBirdGroupChannelCollection> JoinChannelsAsync (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannelCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannelCollection>> JoinChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveChannelsAsync (string botUserid, string apiToken = default(string), string channelUrl = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), string channelUrl = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveChannelsByUrlAsync (string botUserid, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveChannelsByUrlWithHttpInfoAsync (string botUserid, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> ListBotsAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> ListBotsWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a bot&#39;s message
        /// </summary>
        /// <remarks>
        /// ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> SendBotsMessageAsync (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a bot&#39;s message
        /// </summary>
        /// <remarks>
        /// ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendBotsMessageWithHttpInfoAsync (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a bot
        /// </summary>
        /// <remarks>
        /// ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        System.Threading.Tasks.Task<InlineResponse20065Bots> UpdateBotByIdAsync (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a bot
        /// </summary>
        /// <remarks>
        /// ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> UpdateBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a bot
        /// </summary>
        /// <remarks>
        /// ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        System.Threading.Tasks.Task<InlineResponse20065Bots> ViewBotByIdAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a bot
        /// </summary>
        /// <remarks>
        /// ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> ViewBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BotInterfaceApi : IBotInterfaceApi
    {
        private sendbird-platform-sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BotInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BotInterfaceApi(String basePath)
        {
            this.Configuration = new sendbird-platform-sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public BotInterfaceApi()
        {
            this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BotInterfaceApi(sendbird-platform-sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird-platform-sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird-platform-sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        public InlineResponse20065Bots CreateBot (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = CreateBotWithHttpInfo(apiToken, createBotData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        public ApiResponse<InlineResponse20065Bots> CreateBotWithHttpInfo (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createBotData != null && createBotData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createBotData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBotData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065Bots> CreateBotAsync (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = await CreateBotWithHttpInfoAsync(apiToken, createBotData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within the application. Creating a bot is similar to creating a normal user, except that a callback URL is specified in order for the bot to receive events.  &gt; __Note__: The bot must [join](#2-join-channels) a group channel first to interact with users. In group channels, you can invite a bot through the [invite as members](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-invite-as-members) action instead.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-create-a-bot
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createBotData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> CreateBotWithHttpInfoAsync (string apiToken = default(string), CreateBotData createBotData = default(CreateBotData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createBotData != null && createBotData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createBotData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBotData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

        /// <summary>
        /// Delete a bot ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void DeleteBotById (string botUserid, string apiToken = default(string))
        {
             DeleteBotByIdWithHttpInfo(botUserid, apiToken);
        }

        /// <summary>
        /// Delete a bot ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBotByIdWithHttpInfo (string botUserid, string apiToken = default(string))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->DeleteBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a bot ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBotByIdAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteBotByIdWithHttpInfoAsync(botUserid, apiToken, cancellationToken);

        }

        /// <summary>
        /// Delete a bot ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->DeleteBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <returns>SendBirdGroupChannelCollection</returns>
        public SendBirdGroupChannelCollection JoinChannels (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData))
        {
             ApiResponse<SendBirdGroupChannelCollection> localVarResponse = JoinChannelsWithHttpInfo(botUserid, apiToken, joinChannelsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdGroupChannelCollection</returns>
        public ApiResponse<SendBirdGroupChannelCollection> JoinChannelsWithHttpInfo (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->JoinChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinChannelsData != null && joinChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannelCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannelCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannelCollection)));
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdGroupChannelCollection</returns>
        public async System.Threading.Tasks.Task<SendBirdGroupChannelCollection> JoinChannelsAsync (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdGroupChannelCollection> localVarResponse = await JoinChannelsWithHttpInfoAsync(botUserid, apiToken, joinChannelsData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-join-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdGroupChannelCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdGroupChannelCollection>> JoinChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), JoinChannelsData joinChannelsData = default(JoinChannelsData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->JoinChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinChannelsData != null && joinChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdGroupChannelCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdGroupChannelCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdGroupChannelCollection)));
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <returns></returns>
        public void LeaveChannels (string botUserid, string apiToken = default(string), string channelUrl = default(string))
        {
             LeaveChannelsWithHttpInfo(botUserid, apiToken, channelUrl);
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeaveChannelsWithHttpInfo (string botUserid, string apiToken = default(string), string channelUrl = default(string))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->LeaveChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (channelUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_url", channelUrl)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveChannelsAsync (string botUserid, string apiToken = default(string), string channelUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await LeaveChannelsWithHttpInfoAsync(botUserid, apiToken, channelUrl, cancellationToken);

        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="channelUrl"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), string channelUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->LeaveChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (channelUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_url", channelUrl)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void LeaveChannelsByUrl (string botUserid, string channelUrl, string apiToken = default(string))
        {
             LeaveChannelsByUrlWithHttpInfo(botUserid, channelUrl, apiToken);
        }

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeaveChannelsByUrlWithHttpInfo (string botUserid, string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->LeaveChannelsByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling BotInterfaceApi->LeaveChannelsByUrl");

            var localVarPath = "/v3/bots/{bot_userid}/channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveChannelsByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveChannelsByUrlAsync (string botUserid, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await LeaveChannelsByUrlWithHttpInfoAsync(botUserid, channelUrl, apiToken, cancellationToken);

        }

        /// <summary>
        /// Leave channels - When leaving a channel by its channel URL ## Leave channels  Makes a bot leave one or more group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-leave-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveChannelsByUrlWithHttpInfoAsync (string botUserid, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->LeaveChannelsByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling BotInterfaceApi->LeaveChannelsByUrl");

            var localVarPath = "/v3/bots/{bot_userid}/channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveChannelsByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 ListBots (string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20065> localVarResponse = ListBotsWithHttpInfo(apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse<InlineResponse20065> ListBotsWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065> ListBotsAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20065> localVarResponse = await ListBotsWithHttpInfoAsync(apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> ListBotsWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065)));
        }

        /// <summary>
        /// Send a bot&#39;s message ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse SendBotsMessage (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = SendBotsMessageWithHttpInfo(botUserid, apiToken, sendBotSMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a bot&#39;s message ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> SendBotsMessageWithHttpInfo (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->SendBotsMessage");

            var localVarPath = "/v3/bots/{bot_userid}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendBotSMessageData != null && sendBotSMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendBotSMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendBotSMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendBotsMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Send a bot&#39;s message ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> SendBotsMessageAsync (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await SendBotsMessageWithHttpInfoAsync(botUserid, apiToken, sendBotSMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a bot&#39;s message ## Send a bot&#39;s message  Sends a bot&#39;s message to a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-send-a-bot-s-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;bot_userid&#x60;      Type: string      Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendBotSMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendBotsMessageWithHttpInfoAsync (string botUserid, string apiToken = default(string), SendBotSMessageData sendBotSMessageData = default(SendBotSMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->SendBotsMessage");

            var localVarPath = "/v3/bots/{bot_userid}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendBotSMessageData != null && sendBotSMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendBotSMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendBotSMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendBotsMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Update a bot ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        public InlineResponse20065Bots UpdateBotById (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = UpdateBotByIdWithHttpInfo(botUserid, apiToken, updateBotByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a bot ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        public ApiResponse<InlineResponse20065Bots> UpdateBotByIdWithHttpInfo (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->UpdateBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateBotByIdData != null && updateBotByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBotByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBotByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

        /// <summary>
        /// Update a bot ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065Bots> UpdateBotByIdAsync (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = await UpdateBotByIdWithHttpInfoAsync(botUserid, apiToken, updateBotByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a bot ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateBotByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> UpdateBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), UpdateBotByIdData updateBotByIdData = default(UpdateBotByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->UpdateBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateBotByIdData != null && updateBotByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBotByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBotByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

        /// <summary>
        /// View a bot ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20065Bots</returns>
        public InlineResponse20065Bots ViewBotById (string botUserid, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = ViewBotByIdWithHttpInfo(botUserid, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a bot ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065Bots</returns>
        public ApiResponse<InlineResponse20065Bots> ViewBotByIdWithHttpInfo (string botUserid, string apiToken = default(string))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->ViewBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

        /// <summary>
        /// View a bot ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20065Bots</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065Bots> ViewBotByIdAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20065Bots> localVarResponse = await ViewBotByIdWithHttpInfoAsync(botUserid, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a bot ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20065Bots)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065Bots>> ViewBotByIdWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotInterfaceApi->ViewBotById");

            var localVarPath = "/v3/bots/{bot_userid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewBotById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20065Bots>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20065Bots) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20065Bots)));
        }

    }
}
