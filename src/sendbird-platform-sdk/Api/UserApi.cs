/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird-platform-sdk.Client;
using sendbird-platform-sdk.Model;

namespace sendbird-platform-sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 AddRegistrationOrDeviceToken (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData));

        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> AddRegistrationOrDeviceTokenWithHttpInfo (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData));
        /// <summary>
        /// Ban from channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        void BanFromChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData));

        /// <summary>
        /// Ban from channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BanFromChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData));
        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser BlockUser (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData));

        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> BlockUserWithHttpInfo (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData));
        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 ChoosePushNotificationContentTemplate (string userId, string apiToken = default(string), Object body = default(Object));

        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> ChoosePushNotificationContentTemplateWithHttpInfo (string userId, string apiToken = default(string), Object body = default(Object));
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser CreateUser (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData));

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> CreateUserWithHttpInfo (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void DeleteUserById (string userId, string apiToken = default(string));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserByIdWithHttpInfo (string userId, string apiToken = default(string));
        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns></returns>
        void LeaveMyGroupChannels (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData));

        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveMyGroupChannelsWithHttpInfo (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData));
        /// <summary>
        /// List banned channels
        /// </summary>
        /// <remarks>
        /// ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 ListBannedChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List banned channels
        /// </summary>
        /// <remarks>
        /// ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> ListBannedChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// List blocked users
        /// </summary>
        /// <remarks>
        /// ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 ListBlockedUsers (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string));

        /// <summary>
        /// List blocked users
        /// </summary>
        /// <remarks>
        /// ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> ListBlockedUsersWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string));
        /// <summary>
        /// List muted channels
        /// </summary>
        /// <remarks>
        /// ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 ListMutedChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List muted channels
        /// </summary>
        /// <remarks>
        /// ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> ListMutedChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 ListMyGroupChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string));

        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> ListMyGroupChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string));
        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 ListRegistrationOrDeviceTokens (string userId, string tokenType, string apiToken = default(string));

        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> ListRegistrationOrDeviceTokensWithHttpInfo (string userId, string tokenType, string apiToken = default(string));
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 ListUsers (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string));

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> ListUsersWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns></returns>
        void MarkAllMessagesAsRead (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkAllMessagesAsReadWithHttpInfo (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData));
        /// <summary>
        /// Mute in channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        void MuteInChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData));

        /// <summary>
        /// Mute in channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MuteInChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData));
        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        void RegisterAsOperatorToChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData));

        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData));
        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 RemoveRegistrationOrDeviceToken (string userId, string apiToken = default(string));

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> RemoveRegistrationOrDeviceTokenWithHttpInfo (string userId, string apiToken = default(string));
        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 RemoveRegistrationOrDeviceTokenByToken (string userId, string tokenType, string token, string apiToken = default(string));

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo (string userId, string tokenType, string token, string apiToken = default(string));
        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 RemoveRegistrationOrDeviceTokenFromOwnerByToken (string tokenType, string token, string apiToken = default(string));

        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo (string tokenType, string token, string apiToken = default(string));
        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void ResetPushPreferences (string userId, string apiToken = default(string));

        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetPushPreferencesWithHttpInfo (string userId, string apiToken = default(string));
        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void UnblockUserById (string userId, string targetId, string apiToken = default(string));

        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockUserByIdWithHttpInfo (string userId, string targetId, string apiToken = default(string));
        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 UpdateChannelInvitationPreference (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData));

        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> UpdateChannelInvitationPreferenceWithHttpInfo (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData));
        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 UpdateCountPreferenceOfChannelByUrl (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData));

        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> UpdateCountPreferenceOfChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData));
        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 UpdatePushPreferences (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData));

        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> UpdatePushPreferencesWithHttpInfo (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData));
        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 UpdatePushPreferencesForChannelByUrl (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData));

        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> UpdatePushPreferencesForChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData));
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser UpdateUserById (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData));

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> UpdateUserByIdWithHttpInfo (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData));
        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 ViewChannelInvitationPreference (string userId, string apiToken = default(string));

        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> ViewChannelInvitationPreferenceWithHttpInfo (string userId, string apiToken = default(string));
        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 ViewCountPreferenceOfChannelByUrl (string userId, string channelUrl, string apiToken = default(string));

        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> ViewCountPreferenceOfChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string));
        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 ViewNumberOfChannelsByJoinStatus (string userId, string apiToken = default(string), string state = default(string));

        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> ViewNumberOfChannelsByJoinStatusWithHttpInfo (string userId, string apiToken = default(string), string state = default(string));
        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 ViewNumberOfChannelsWithUnreadMessages (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string));

        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string));
        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 ViewNumberOfUnreadItems (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string));

        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> ViewNumberOfUnreadItemsWithHttpInfo (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string));
        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 ViewNumberOfUnreadMessages (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string));

        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> ViewNumberOfUnreadMessagesWithHttpInfo (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string));
        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 ViewPushPreferences (string userId, string apiToken = default(string));

        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> ViewPushPreferencesWithHttpInfo (string userId, string apiToken = default(string));
        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 ViewPushPreferencesForChannelByUrl (string userId, string channelUrl, string apiToken = default(string));

        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> ViewPushPreferencesForChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string));
        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser ViewUserById (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string));

        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> ViewUserByIdWithHttpInfo (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string));
        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 ViewWhoOwnsRegistrationOrDeviceTokenByToken (string tokenType, string token, string apiToken = default(string));

        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo (string tokenType, string token, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> AddRegistrationOrDeviceTokenAsync (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> AddRegistrationOrDeviceTokenWithHttpInfoAsync (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Ban from channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BanFromChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Ban from channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BanFromChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> BlockUserAsync (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> BlockUserWithHttpInfoAsync (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> ChoosePushNotificationContentTemplateAsync (string userId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> ChoosePushNotificationContentTemplateWithHttpInfoAsync (string userId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> CreateUserAsync (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> CreateUserWithHttpInfoAsync (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserByIdAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveMyGroupChannelsAsync (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveMyGroupChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List banned channels
        /// </summary>
        /// <remarks>
        /// ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> ListBannedChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List banned channels
        /// </summary>
        /// <remarks>
        /// ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> ListBannedChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List blocked users
        /// </summary>
        /// <remarks>
        /// ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> ListBlockedUsersAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List blocked users
        /// </summary>
        /// <remarks>
        /// ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ListBlockedUsersWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List muted channels
        /// </summary>
        /// <remarks>
        /// ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> ListMutedChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List muted channels
        /// </summary>
        /// <remarks>
        /// ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> ListMutedChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> ListMyGroupChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> ListMyGroupChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> ListRegistrationOrDeviceTokensAsync (string userId, string tokenType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> ListRegistrationOrDeviceTokensWithHttpInfoAsync (string userId, string tokenType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> ListUsersAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ListUsersWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkAllMessagesAsReadAsync (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkAllMessagesAsReadWithHttpInfoAsync (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mute in channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MuteInChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mute in channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MuteInChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterAsOperatorToChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> RemoveRegistrationOrDeviceTokenAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> RemoveRegistrationOrDeviceTokenWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> RemoveRegistrationOrDeviceTokenByTokenAsync (string userId, string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string userId, string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> RemoveRegistrationOrDeviceTokenFromOwnerByTokenAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetPushPreferencesAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetPushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockUserByIdAsync (string userId, string targetId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockUserByIdWithHttpInfoAsync (string userId, string targetId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> UpdateChannelInvitationPreferenceAsync (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> UpdateChannelInvitationPreferenceWithHttpInfoAsync (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> UpdateCountPreferenceOfChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> UpdatePushPreferencesAsync (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> UpdatePushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> UpdatePushPreferencesForChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> UpdateUserByIdAsync (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> UpdateUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> ViewChannelInvitationPreferenceAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ViewChannelInvitationPreferenceWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> ViewCountPreferenceOfChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> ViewNumberOfChannelsByJoinStatusAsync (string userId, string apiToken = default(string), string state = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync (string userId, string apiToken = default(string), string state = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> ViewNumberOfChannelsWithUnreadMessagesAsync (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> ViewNumberOfUnreadItemsAsync (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> ViewNumberOfUnreadItemsWithHttpInfoAsync (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> ViewNumberOfUnreadMessagesAsync (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ViewNumberOfUnreadMessagesWithHttpInfoAsync (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> ViewPushPreferencesAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> ViewPushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> ViewPushPreferencesForChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> ViewPushPreferencesForChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> ViewUserByIdAsync (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> ViewUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> ViewWhoOwnsRegistrationOrDeviceTokenByTokenAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private sendbird-platform-sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new sendbird-platform-sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserApi()
        {
            this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(sendbird-platform-sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird-platform-sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird-platform-sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird-platform-sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird-platform-sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 AddRegistrationOrDeviceToken (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData))
        {
             ApiResponse<InlineResponse20025> localVarResponse = AddRegistrationOrDeviceTokenWithHttpInfo(userId, tokenType, apiToken, addRegistrationOrDeviceTokenData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse<InlineResponse20025> AddRegistrationOrDeviceTokenWithHttpInfo (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->AddRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addRegistrationOrDeviceTokenData != null && addRegistrationOrDeviceTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addRegistrationOrDeviceTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRegistrationOrDeviceTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> AddRegistrationOrDeviceTokenAsync (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20025> localVarResponse = await AddRegistrationOrDeviceTokenWithHttpInfoAsync(userId, tokenType, apiToken, addRegistrationOrDeviceTokenData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> AddRegistrationOrDeviceTokenWithHttpInfoAsync (string userId, string tokenType, string apiToken = default(string), AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default(AddRegistrationOrDeviceTokenData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->AddRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addRegistrationOrDeviceTokenData != null && addRegistrationOrDeviceTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addRegistrationOrDeviceTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRegistrationOrDeviceTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Ban from channels with custom channel types ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        public void BanFromChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData))
        {
             BanFromChannelsWithCustomChannelTypesWithHttpInfo(userId, apiToken, banFromChannelsWithCustomChannelTypesData);
        }

        /// <summary>
        /// Ban from channels with custom channel types ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BanFromChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->BanFromChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/banned_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (banFromChannelsWithCustomChannelTypesData != null && banFromChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(banFromChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = banFromChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BanFromChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Ban from channels with custom channel types ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BanFromChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await BanFromChannelsWithCustomChannelTypesWithHttpInfoAsync(userId, apiToken, banFromChannelsWithCustomChannelTypesData, cancellationToken);

        }

        /// <summary>
        /// Ban from channels with custom channel types ## Ban from channels with custom channel types  Bans a user from channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-ban-from-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="banFromChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BanFromChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), BanFromChannelsWithCustomChannelTypesData banFromChannelsWithCustomChannelTypesData = default(BanFromChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->BanFromChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/banned_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (banFromChannelsWithCustomChannelTypesData != null && banFromChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(banFromChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = banFromChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BanFromChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Block a user ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser BlockUser (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData))
        {
             ApiResponse<SendBirdUser> localVarResponse = BlockUserWithHttpInfo(userId, apiToken, blockUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Block a user ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> BlockUserWithHttpInfo (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->BlockUser");

            var localVarPath = "/v3/users/{user_id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (blockUserData != null && blockUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Block a user ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> BlockUserAsync (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await BlockUserWithHttpInfoAsync(userId, apiToken, blockUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Block a user ## Block a user  Allows a user to block another user. A user doesn&#39;t receive messages from someone they have blocked anymore. Also, blocking someone doesn&#39;t alert them that they have been blocked. Blocked users still can send messages as normal in the channel: however, they can&#39;t receive any messages from the users who have blocked them.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-block-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="blockUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> BlockUserWithHttpInfoAsync (string userId, string apiToken = default(string), BlockUserData blockUserData = default(BlockUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->BlockUser");

            var localVarPath = "/v3/users/{user_id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (blockUserData != null && blockUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 ChoosePushNotificationContentTemplate (string userId, string apiToken = default(string), Object body = default(Object))
        {
             ApiResponse<InlineResponse20029> localVarResponse = ChoosePushNotificationContentTemplateWithHttpInfo(userId, apiToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse<InlineResponse20029> ChoosePushNotificationContentTemplateWithHttpInfo (string userId, string apiToken = default(string), Object body = default(Object))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ChoosePushNotificationContentTemplate");

            var localVarPath = "/v3/users/{user_id}/push/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChoosePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> ChoosePushNotificationContentTemplateAsync (string userId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20029> localVarResponse = await ChoosePushNotificationContentTemplateWithHttpInfoAsync(userId, apiToken, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user&#39;s own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> ChoosePushNotificationContentTemplateWithHttpInfoAsync (string userId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ChoosePushNotificationContentTemplate");

            var localVarPath = "/v3/users/{user_id}/push/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChoosePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser CreateUser (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData))
        {
             ApiResponse<SendBirdUser> localVarResponse = CreateUserWithHttpInfo(apiToken, createUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> CreateUserWithHttpInfo (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData))
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserData != null && createUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> CreateUserAsync (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await CreateUserWithHttpInfoAsync(apiToken, createUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> CreateUserWithHttpInfoAsync (string apiToken = default(string), CreateUserData createUserData = default(CreateUserData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserData != null && createUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void DeleteUserById (string userId, string apiToken = default(string))
        {
             DeleteUserByIdWithHttpInfo(userId, apiToken);
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserByIdWithHttpInfo (string userId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserByIdAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteUserByIdWithHttpInfoAsync(userId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns></returns>
        public void LeaveMyGroupChannels (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData))
        {
             LeaveMyGroupChannelsWithHttpInfo(userId, apiToken, leaveMyGroupChannelsData);
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeaveMyGroupChannelsWithHttpInfo (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->LeaveMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveMyGroupChannelsData != null && leaveMyGroupChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveMyGroupChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveMyGroupChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveMyGroupChannelsAsync (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await LeaveMyGroupChannelsWithHttpInfoAsync(userId, apiToken, leaveMyGroupChannelsData, cancellationToken);

        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveMyGroupChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), LeaveMyGroupChannelsData leaveMyGroupChannelsData = default(LeaveMyGroupChannelsData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->LeaveMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveMyGroupChannelsData != null && leaveMyGroupChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveMyGroupChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveMyGroupChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List banned channels ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 ListBannedChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20022> localVarResponse = ListBannedChannelsWithHttpInfo(userId, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List banned channels ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse<InlineResponse20022> ListBannedChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListBannedChannels");

            var localVarPath = "/v3/users/{user_id}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBannedChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// List banned channels ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> ListBannedChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20022> localVarResponse = await ListBannedChannelsWithHttpInfoAsync(userId, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List banned channels ## List banned channels  Retrieves a list of open and group channels with additional information where a user is banned.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-banned-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> ListBannedChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListBannedChannels");

            var localVarPath = "/v3/users/{user_id}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBannedChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// List blocked users ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 ListBlockedUsers (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string))
        {
             ApiResponse<InlineResponse20016> localVarResponse = ListBlockedUsersWithHttpInfo(userId, apiToken, token, limit, userIds, metadatakey, metadatavaluesIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List blocked users ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse<InlineResponse20016> ListBlockedUsersWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListBlockedUsers");

            var localVarPath = "/v3/users/{user_id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// List blocked users ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> ListBlockedUsersAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20016> localVarResponse = await ListBlockedUsersWithHttpInfoAsync(userId, apiToken, token, limit, userIds, metadatakey, metadatavaluesIn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List blocked users ## List blocked users  Retrieves a list of other users that a user has blocked.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-blocked-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ListBlockedUsersWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string userIds = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListBlockedUsers");

            var localVarPath = "/v3/users/{user_id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// List muted channels ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 ListMutedChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20023> localVarResponse = ListMutedChannelsWithHttpInfo(userId, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List muted channels ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse<InlineResponse20023> ListMutedChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMutedChannels");

            var localVarPath = "/v3/users/{user_id}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMutedChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// List muted channels ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> ListMutedChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20023> localVarResponse = await ListMutedChannelsWithHttpInfoAsync(userId, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List muted channels ## List muted channels  Retrieves a list of open and group channels with additional information where a user is muted.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-muted-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> ListMutedChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMutedChannels");

            var localVarPath = "/v3/users/{user_id}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMutedChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 ListMyGroupChannels (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string))
        {
             ApiResponse<InlineResponse20017> localVarResponse = ListMyGroupChannelsWithHttpInfo(userId, apiToken, token, limit, distinctMode, publicMode, superMode, hiddenMode, memberStateFilter, unreadFilter, createdAfter, createdBefore, showEmpty, showFrozen, showMember, showDeliveryReceipt, showReadReceipt, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, searchQuery, searchFields, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, customType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse<InlineResponse20017> ListMyGroupChannelsWithHttpInfo (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (hiddenMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_mode", hiddenMode)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (unreadFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unread_filter", unreadFilter)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_query", searchQuery)); // query parameter
            if (searchFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_fields", searchFields)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> ListMyGroupChannelsAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20017> localVarResponse = await ListMyGroupChannelsWithHttpInfoAsync(userId, apiToken, token, limit, distinctMode, publicMode, superMode, hiddenMode, memberStateFilter, unreadFilter, createdAfter, createdBefore, showEmpty, showFrozen, showMember, showDeliveryReceipt, showReadReceipt, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, searchQuery, searchFields, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, customType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> ListMyGroupChannelsWithHttpInfoAsync (string userId, string apiToken = default(string), string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), string hiddenMode = default(string), string memberStateFilter = default(string), string unreadFilter = default(string), int? createdAfter = default(int?), int? createdBefore = default(int?), bool? showEmpty = default(bool?), bool? showFrozen = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string searchQuery = default(string), string searchFields = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), string customType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (hiddenMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_mode", hiddenMode)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (unreadFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unread_filter", unreadFilter)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_query", searchQuery)); // query parameter
            if (searchFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_fields", searchFields)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 ListRegistrationOrDeviceTokens (string userId, string tokenType, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20024> localVarResponse = ListRegistrationOrDeviceTokensWithHttpInfo(userId, tokenType, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse<InlineResponse20024> ListRegistrationOrDeviceTokensWithHttpInfo (string userId, string tokenType, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ListRegistrationOrDeviceTokens");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRegistrationOrDeviceTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> ListRegistrationOrDeviceTokensAsync (string userId, string tokenType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20024> localVarResponse = await ListRegistrationOrDeviceTokensWithHttpInfoAsync(userId, tokenType, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user&#39;s FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; in the &#x60;token_type&#x60; parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> ListRegistrationOrDeviceTokensWithHttpInfoAsync (string userId, string tokenType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ListRegistrationOrDeviceTokens");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRegistrationOrDeviceTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 ListUsers (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string))
        {
             ApiResponse<InlineResponse20016> localVarResponse = ListUsersWithHttpInfo(apiToken, token, limit, activeMode, showBot, userIds, nickname, nicknameStartswith, metadatakey, metadatavaluesIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse<InlineResponse20016> ListUsersWithHttpInfo (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string))
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (activeMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_mode", activeMode)); // query parameter
            if (showBot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_bot", showBot)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (nickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname", nickname)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> ListUsersAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20016> localVarResponse = await ListUsersWithHttpInfoAsync(apiToken, token, limit, activeMode, showBot, userIds, nickname, nicknameStartswith, metadatakey, metadatavaluesIn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ListUsersWithHttpInfoAsync (string apiToken = default(string), string token = default(string), int? limit = default(int?), string activeMode = default(string), bool? showBot = default(bool?), string userIds = default(string), string nickname = default(string), string nicknameStartswith = default(string), string metadatakey = default(string), string metadatavaluesIn = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (activeMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_mode", activeMode)); // query parameter
            if (showBot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_bot", showBot)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (nickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname", nickname)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns></returns>
        public void MarkAllMessagesAsRead (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData))
        {
             MarkAllMessagesAsReadWithHttpInfo(userId, apiToken, markAllMessagesAsReadData);
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkAllMessagesAsReadWithHttpInfo (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MarkAllMessagesAsRead");

            var localVarPath = "/v3/users/{user_id}/mark_as_read_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markAllMessagesAsReadData != null && markAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkAllMessagesAsReadAsync (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await MarkAllMessagesAsReadWithHttpInfoAsync(userId, apiToken, markAllMessagesAsReadData, cancellationToken);

        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user&#39;s unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkAllMessagesAsReadWithHttpInfoAsync (string userId, string apiToken = default(string), MarkAllMessagesAsReadData markAllMessagesAsReadData = default(MarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MarkAllMessagesAsRead");

            var localVarPath = "/v3/users/{user_id}/mark_as_read_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markAllMessagesAsReadData != null && markAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mute in channels with custom channel types ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        public void MuteInChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData))
        {
             MuteInChannelsWithCustomChannelTypesWithHttpInfo(userId, apiToken, muteInChannelsWithCustomChannelTypesData);
        }

        /// <summary>
        /// Mute in channels with custom channel types ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MuteInChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MuteInChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/muted_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (muteInChannelsWithCustomChannelTypesData != null && muteInChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteInChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteInChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteInChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mute in channels with custom channel types ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MuteInChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await MuteInChannelsWithCustomChannelTypesWithHttpInfoAsync(userId, apiToken, muteInChannelsWithCustomChannelTypesData, cancellationToken);

        }

        /// <summary>
        /// Mute in channels with custom channel types ## Mute in channels with custom channel types  Mutes a user in channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mute-in-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="muteInChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MuteInChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), MuteInChannelsWithCustomChannelTypesData muteInChannelsWithCustomChannelTypesData = default(MuteInChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MuteInChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/muted_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (muteInChannelsWithCustomChannelTypesData != null && muteInChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteInChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteInChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteInChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns></returns>
        public void RegisterAsOperatorToChannelsWithCustomChannelTypes (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData))
        {
             RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo(userId, apiToken, registerAsOperatorToChannelsWithCustomChannelTypesData);
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/operating_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAsOperatorToChannelsWithCustomChannelTypesData != null && registerAsOperatorToChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAsOperatorToChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAsOperatorToChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAsOperatorToChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterAsOperatorToChannelsWithCustomChannelTypesAsync (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync(userId, apiToken, registerAsOperatorToChannelsWithCustomChannelTypesData, cancellationToken);

        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync (string userId, string apiToken = default(string), RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default(RegisterAsOperatorToChannelsWithCustomChannelTypesData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/operating_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAsOperatorToChannelsWithCustomChannelTypesData != null && registerAsOperatorToChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAsOperatorToChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAsOperatorToChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAsOperatorToChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 RemoveRegistrationOrDeviceToken (string userId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20026> localVarResponse = RemoveRegistrationOrDeviceTokenWithHttpInfo(userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse<InlineResponse20026> RemoveRegistrationOrDeviceTokenWithHttpInfo (string userId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> RemoveRegistrationOrDeviceTokenAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20026> localVarResponse = await RemoveRegistrationOrDeviceTokenWithHttpInfoAsync(userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> RemoveRegistrationOrDeviceTokenWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 RemoveRegistrationOrDeviceTokenByToken (string userId, string tokenType, string token, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20026> localVarResponse = RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo(userId, tokenType, token, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse<InlineResponse20026> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo (string userId, string tokenType, string token, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> RemoveRegistrationOrDeviceTokenByTokenAsync (string userId, string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20026> localVarResponse = await RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync(userId, tokenType, token, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user&#39;s one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string userId, string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 RemoveRegistrationOrDeviceTokenFromOwnerByToken (string tokenType, string token, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20027> localVarResponse = RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo(tokenType, token, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse<InlineResponse20027> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo (string tokenType, string token, string apiToken = default(string))
        {
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenFromOwnerByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> RemoveRegistrationOrDeviceTokenFromOwnerByTokenAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20027> localVarResponse = await RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync(tokenType, token, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenFromOwnerByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void ResetPushPreferences (string userId, string apiToken = default(string))
        {
             ResetPushPreferencesWithHttpInfo(userId, apiToken);
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetPushPreferencesWithHttpInfo (string userId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ResetPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetPushPreferencesAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ResetPushPreferencesWithHttpInfoAsync(userId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user&#39;s push preferences. After performing this action,   &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; are set to false.  The values of the parameters associated with the time frame are all set to 0.  &#x60;timezone&#x60; is reset to &#x60;UTC&#x60;.  &#x60;push_sound&#x60; is reset to &#x60;default&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetPushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ResetPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unblock a user ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void UnblockUserById (string userId, string targetId, string apiToken = default(string))
        {
             UnblockUserByIdWithHttpInfo(userId, targetId, apiToken);
        }

        /// <summary>
        /// Unblock a user ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockUserByIdWithHttpInfo (string userId, string targetId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UnblockUserById");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling UserApi->UnblockUserById");

            var localVarPath = "/v3/users/{user_id}/block/{target_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (targetId != null) localVarPathParams.Add("target_id", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unblock a user ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockUserByIdAsync (string userId, string targetId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnblockUserByIdWithHttpInfoAsync(userId, targetId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Unblock a user ## Unblock a user  Unblocks the user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-unblock-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="targetId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockUserByIdWithHttpInfoAsync (string userId, string targetId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UnblockUserById");
            // verify the required parameter 'targetId' is set
            if (targetId == null)
                throw new ApiException(400, "Missing required parameter 'targetId' when calling UserApi->UnblockUserById");

            var localVarPath = "/v3/users/{user_id}/block/{target_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (targetId != null) localVarPathParams.Add("target_id", this.Configuration.ApiClient.ParameterToString(targetId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 UpdateChannelInvitationPreference (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData))
        {
             ApiResponse<InlineResponse2005> localVarResponse = UpdateChannelInvitationPreferenceWithHttpInfo(userId, apiToken, updateChannelInvitationPreferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> UpdateChannelInvitationPreferenceWithHttpInfo (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateChannelInvitationPreferenceData != null && updateChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> UpdateChannelInvitationPreferenceAsync (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await UpdateChannelInvitationPreferenceWithHttpInfoAsync(userId, apiToken, updateChannelInvitationPreferenceData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> UpdateChannelInvitationPreferenceWithHttpInfoAsync (string userId, string apiToken = default(string), UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default(UpdateChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateChannelInvitationPreferenceData != null && updateChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 UpdateCountPreferenceOfChannelByUrl (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData))
        {
             ApiResponse<InlineResponse20021> localVarResponse = UpdateCountPreferenceOfChannelByUrlWithHttpInfo(userId, channelUrl, apiToken, updateCountPreferenceOfChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse<InlineResponse20021> UpdateCountPreferenceOfChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateCountPreferenceOfChannelByUrlData != null && updateCountPreferenceOfChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCountPreferenceOfChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCountPreferenceOfChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> UpdateCountPreferenceOfChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20021> localVarResponse = await UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync(userId, channelUrl, apiToken, updateCountPreferenceOfChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default(UpdateCountPreferenceOfChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateCountPreferenceOfChannelByUrlData != null && updateCountPreferenceOfChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCountPreferenceOfChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCountPreferenceOfChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 UpdatePushPreferences (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData))
        {
             ApiResponse<InlineResponse20028> localVarResponse = UpdatePushPreferencesWithHttpInfo(userId, apiToken, updatePushPreferencesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> UpdatePushPreferencesWithHttpInfo (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesData != null && updatePushPreferencesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> UpdatePushPreferencesAsync (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20028> localVarResponse = await UpdatePushPreferencesWithHttpInfoAsync(userId, apiToken, updatePushPreferencesData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user&#39;s push preferences. Through this action, you can set &#x60;do_not_disturb&#x60; for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> UpdatePushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), UpdatePushPreferencesData updatePushPreferencesData = default(UpdatePushPreferencesData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesData != null && updatePushPreferencesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 UpdatePushPreferencesForChannelByUrl (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData))
        {
             ApiResponse<InlineResponse20028> localVarResponse = UpdatePushPreferencesForChannelByUrlWithHttpInfo(userId, channelUrl, apiToken, updatePushPreferencesForChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> UpdatePushPreferencesForChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdatePushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesForChannelByUrlData != null && updatePushPreferencesForChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesForChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesForChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> UpdatePushPreferencesForChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20028> localVarResponse = await UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync(userId, channelUrl, apiToken, updatePushPreferencesForChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user&#39;s specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default(UpdatePushPreferencesForChannelByUrlData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdatePushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesForChannelByUrlData != null && updatePushPreferencesForChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesForChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesForChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser UpdateUserById (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData))
        {
             ApiResponse<SendBirdUser> localVarResponse = UpdateUserByIdWithHttpInfo(userId, apiToken, updateUserByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> UpdateUserByIdWithHttpInfo (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateUserByIdData != null && updateUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> UpdateUserByIdAsync (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await UpdateUserByIdWithHttpInfoAsync(userId, apiToken, updateUserByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the &#x60;leave_all_when_deactivated&#x60; is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> UpdateUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), UpdateUserByIdData updateUserByIdData = default(UpdateUserByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateUserByIdData != null && updateUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 ViewChannelInvitationPreference (string userId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse2005> localVarResponse = ViewChannelInvitationPreferenceWithHttpInfo(userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> ViewChannelInvitationPreferenceWithHttpInfo (string userId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> ViewChannelInvitationPreferenceAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await ViewChannelInvitationPreferenceWithHttpInfoAsync(userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user&#39;s [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  &gt; __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ViewChannelInvitationPreferenceWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 ViewCountPreferenceOfChannelByUrl (string userId, string channelUrl, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20021> localVarResponse = ViewCountPreferenceOfChannelByUrlWithHttpInfo(userId, channelUrl, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse<InlineResponse20021> ViewCountPreferenceOfChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> ViewCountPreferenceOfChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20021> localVarResponse = await ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync(userId, channelUrl, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 ViewNumberOfChannelsByJoinStatus (string userId, string apiToken = default(string), string state = default(string))
        {
             ApiResponse<InlineResponse20020> localVarResponse = ViewNumberOfChannelsByJoinStatusWithHttpInfo(userId, apiToken, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse<InlineResponse20020> ViewNumberOfChannelsByJoinStatusWithHttpInfo (string userId, string apiToken = default(string), string state = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsByJoinStatus");

            var localVarPath = "/v3/users/{user_id}/group_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsByJoinStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> ViewNumberOfChannelsByJoinStatusAsync (string userId, string apiToken = default(string), string state = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20020> localVarResponse = await ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync(userId, apiToken, state, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user&#39;s group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync (string userId, string apiToken = default(string), string state = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsByJoinStatus");

            var localVarPath = "/v3/users/{user_id}/group_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsByJoinStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 ViewNumberOfChannelsWithUnreadMessages (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string))
        {
             ApiResponse<InlineResponse20018> localVarResponse = ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo(userId, apiToken, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse<InlineResponse20018> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsWithUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> ViewNumberOfChannelsWithUnreadMessagesAsync (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20018> localVarResponse = await ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync(userId, apiToken, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user&#39;s group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync (string userId, string apiToken = default(string), List<string> customTypes = default(List<string>), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsWithUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 ViewNumberOfUnreadItems (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string))
        {
             ApiResponse<InlineResponse20019> localVarResponse = ViewNumberOfUnreadItemsWithHttpInfo(userId, apiToken, customType, itemKeys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse<InlineResponse20019> ViewNumberOfUnreadItemsWithHttpInfo (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadItems");

            var localVarPath = "/v3/users/{user_id}/unread_item_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (itemKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_keys", itemKeys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> ViewNumberOfUnreadItemsAsync (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20019> localVarResponse = await ViewNumberOfUnreadItemsWithHttpInfoAsync(userId, apiToken, customType, itemKeys, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user&#39;s unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> ViewNumberOfUnreadItemsWithHttpInfoAsync (string userId, string apiToken = default(string), string customType = default(string), string itemKeys = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadItems");

            var localVarPath = "/v3/users/{user_id}/unread_item_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (itemKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_keys", itemKeys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 ViewNumberOfUnreadMessages (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string))
        {
             ApiResponse<InlineResponse20018> localVarResponse = ViewNumberOfUnreadMessagesWithHttpInfo(userId, apiToken, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse<InlineResponse20018> ViewNumberOfUnreadMessagesWithHttpInfo (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_message_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> ViewNumberOfUnreadMessagesAsync (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20018> localVarResponse = await ViewNumberOfUnreadMessagesWithHttpInfoAsync(userId, apiToken, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user&#39;s currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> ViewNumberOfUnreadMessagesWithHttpInfoAsync (string userId, string apiToken = default(string), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_message_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 ViewPushPreferences (string userId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20028> localVarResponse = ViewPushPreferencesWithHttpInfo(userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> ViewPushPreferencesWithHttpInfo (string userId, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> ViewPushPreferencesAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20028> localVarResponse = await ViewPushPreferencesWithHttpInfoAsync(userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user&#39;s push preferences about whether the user has set &#x60;do_not_disturb&#x60; to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> ViewPushPreferencesWithHttpInfoAsync (string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 ViewPushPreferencesForChannelByUrl (string userId, string channelUrl, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20028> localVarResponse = ViewPushPreferencesForChannelByUrlWithHttpInfo(userId, channelUrl, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> ViewPushPreferencesForChannelByUrlWithHttpInfo (string userId, string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewPushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> ViewPushPreferencesForChannelByUrlAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20028> localVarResponse = await ViewPushPreferencesForChannelByUrlWithHttpInfoAsync(userId, channelUrl, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> ViewPushPreferencesForChannelByUrlWithHttpInfoAsync (string userId, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewPushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser ViewUserById (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string))
        {
             ApiResponse<SendBirdUser> localVarResponse = ViewUserByIdWithHttpInfo(userId, apiToken, includeUnreadCount, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> ViewUserByIdWithHttpInfo (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (includeUnreadCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_unread_count", includeUnreadCount)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> ViewUserByIdAsync (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdUser> localVarResponse = await ViewUserByIdWithHttpInfoAsync(userId, apiToken, includeUnreadCount, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;user_id&#x60;      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> ViewUserByIdWithHttpInfoAsync (string userId, string apiToken = default(string), bool? includeUnreadCount = default(bool?), string customTypes = default(string), string superMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (includeUnreadCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_unread_count", includeUnreadCount)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 ViewWhoOwnsRegistrationOrDeviceTokenByToken (string tokenType, string token, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20027> localVarResponse = ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo(tokenType, token, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse<InlineResponse20027> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo (string tokenType, string token, string apiToken = default(string))
        {
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWhoOwnsRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> ViewWhoOwnsRegistrationOrDeviceTokenByTokenAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20027> localVarResponse = await ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync(tokenType, token, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird-platform-sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string tokenType, string token, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWhoOwnsRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

    }
}
