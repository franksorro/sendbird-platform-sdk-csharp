/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 AddExtraDataToMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData));

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> AddExtraDataToMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData));
        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 AddReactionToAMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData));

        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> AddReactionToAMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData));
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        void DeleteMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string));

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string));
        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 GcMarkAllMessagesAsDelivered (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData));

        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> GcMarkAllMessagesAsDeliveredWithHttpInfo (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns></returns>
        void GcMarkAllMessagesAsRead (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GcMarkAllMessagesAsReadWithHttpInfo (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData));
        /// <summary>
        /// View number of each member&#39;s unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 GcViewNumberOfEachMembersUnreadMessages (string channelUrl, string apiToken = default(string), string userIds = default(string));

        /// <summary>
        /// View number of each member&#39;s unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo (string channelUrl, string apiToken = default(string), string userIds = default(string));
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 ListMessages (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?));

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> ListMessagesWithHttpInfo (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?));
        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 ListReactionsOfMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?));

        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> ListReactionsOfMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?));
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <returns></returns>
        void RemoveExtraDataFromMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>));

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveExtraDataFromMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>));
        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 RemoveReactionFromAMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string));

        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> RemoveReactionFromAMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string));
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse SendMessage (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData));

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> SendMessageWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData));
        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse TranslateMessageIntoOtherLanguages (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object));

        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object));
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 UpdateExtraDataInMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData));

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> UpdateExtraDataInMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData));
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse UpdateMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData));

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> UpdateMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData));
        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse ViewMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?));

        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> ViewMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?));
        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 ViewTotalNumberOfMessagesInChannel (string channelType, string channelUrl, string apiToken = default(string));

        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> ViewTotalNumberOfMessagesInChannelWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> AddExtraDataToMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> AddExtraDataToMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> AddReactionToAMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> AddReactionToAMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> GcMarkAllMessagesAsDeliveredAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GcMarkAllMessagesAsDeliveredWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GcMarkAllMessagesAsReadAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcMarkAllMessagesAsReadWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of each member&#39;s unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> GcViewNumberOfEachMembersUnreadMessagesAsync (string channelUrl, string apiToken = default(string), string userIds = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of each member&#39;s unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string userIds = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> ListMessagesAsync (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ListMessagesWithHttpInfoAsync (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> ListReactionsOfMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> ListReactionsOfMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveExtraDataFromMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> RemoveReactionFromAMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> RemoveReactionFromAMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> SendMessageAsync (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendMessageWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> TranslateMessageIntoOtherLanguagesWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> UpdateExtraDataInMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> UpdateExtraDataInMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> UpdateMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> UpdateMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> ViewMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> ViewMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> ViewTotalNumberOfMessagesInChannelAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessagesApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 AddExtraDataToMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData))
        {
             ApiResponse<InlineResponse20054> localVarResponse = AddExtraDataToMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, addExtraDataToMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse<InlineResponse20054> AddExtraDataToMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->AddExtraDataToMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->AddExtraDataToMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->AddExtraDataToMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToMessageData != null && addExtraDataToMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054> AddExtraDataToMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20054> localVarResponse = await AddExtraDataToMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, addExtraDataToMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> AddExtraDataToMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->AddExtraDataToMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->AddExtraDataToMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->AddExtraDataToMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToMessageData != null && addExtraDataToMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 AddReactionToAMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData))
        {
             ApiResponse<InlineResponse20053> localVarResponse = AddReactionToAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, addReactionToAMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse<InlineResponse20053> AddReactionToAMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->AddReactionToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->AddReactionToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->AddReactionToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addReactionToAMessageData != null && addReactionToAMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addReactionToAMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addReactionToAMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReactionToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> AddReactionToAMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20053> localVarResponse = await AddReactionToAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, addReactionToAMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> AddReactionToAMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->AddReactionToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->AddReactionToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->AddReactionToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addReactionToAMessageData != null && addReactionToAMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addReactionToAMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addReactionToAMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReactionToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns></returns>
        public void DeleteMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string))
        {
             DeleteMessageByIdWithHttpInfo(channelType, channelUrl, messageId, apiToken);
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->DeleteMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->DeleteMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->DeleteMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteMessageByIdWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, cancellationToken);

        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->DeleteMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->DeleteMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->DeleteMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 GcMarkAllMessagesAsDelivered (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData))
        {
             ApiResponse<InlineResponse20050> localVarResponse = GcMarkAllMessagesAsDeliveredWithHttpInfo(channelUrl, apiToken, gcMarkAllMessagesAsDeliveredData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse<InlineResponse20050> GcMarkAllMessagesAsDeliveredWithHttpInfo (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcMarkAllMessagesAsDelivered");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsDeliveredData != null && gcMarkAllMessagesAsDeliveredData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsDeliveredData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsDeliveredData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsDelivered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> GcMarkAllMessagesAsDeliveredAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20050> localVarResponse = await GcMarkAllMessagesAsDeliveredWithHttpInfoAsync(channelUrl, apiToken, gcMarkAllMessagesAsDeliveredData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GcMarkAllMessagesAsDeliveredWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcMarkAllMessagesAsDelivered");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsDeliveredData != null && gcMarkAllMessagesAsDeliveredData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsDeliveredData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsDeliveredData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsDelivered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns></returns>
        public void GcMarkAllMessagesAsRead (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData))
        {
             GcMarkAllMessagesAsReadWithHttpInfo(channelUrl, apiToken, gcMarkAllMessagesAsReadData);
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GcMarkAllMessagesAsReadWithHttpInfo (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcMarkAllMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsReadData != null && gcMarkAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GcMarkAllMessagesAsReadAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken))
        {
             await GcMarkAllMessagesAsReadWithHttpInfoAsync(channelUrl, apiToken, gcMarkAllMessagesAsReadData, cancellationToken);

        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcMarkAllMessagesAsReadWithHttpInfoAsync (string channelUrl, string apiToken = default(string), GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcMarkAllMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsReadData != null && gcMarkAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// View number of each member&#39;s unread messages ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 GcViewNumberOfEachMembersUnreadMessages (string channelUrl, string apiToken = default(string), string userIds = default(string))
        {
             ApiResponse<InlineResponse20049> localVarResponse = GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(channelUrl, apiToken, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of each member&#39;s unread messages ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse<InlineResponse20049> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo (string channelUrl, string apiToken = default(string), string userIds = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcViewNumberOfEachMembersUnreadMessages");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewNumberOfEachMembersUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        /// View number of each member&#39;s unread messages ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> GcViewNumberOfEachMembersUnreadMessagesAsync (string channelUrl, string apiToken = default(string), string userIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20049> localVarResponse = await GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync(channelUrl, apiToken, userIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of each member&#39;s unread messages ## View number of each member&#39;s unread messages  Retrieves the total number of each member&#39;s unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync (string channelUrl, string apiToken = default(string), string userIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->GcViewNumberOfEachMembersUnreadMessages");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewNumberOfEachMembersUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 ListMessages (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?))
        {
             ApiResponse<InlineResponse20047> localVarResponse = ListMessagesWithHttpInfo(channelType, channelUrl, messageTs, messageId, apiToken, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse<InlineResponse20047> ListMessagesWithHttpInfo (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ListMessages");
            // verify the required parameter 'messageTs' is set
            if (messageTs == null)
                throw new ApiException(400, "Missing required parameter 'messageTs' when calling MessagesApi->ListMessages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> ListMessagesAsync (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20047> localVarResponse = await ListMessagesWithHttpInfoAsync(channelType, channelUrl, messageTs, messageId, apiToken, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  &gt; This message retrieval is one of Sendbird&#39;s [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> ListMessagesWithHttpInfoAsync (string channelType, string channelUrl, int messageTs, int messageId, string apiToken = default(string), int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string customType = default(string), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ListMessages");
            // verify the required parameter 'messageTs' is set
            if (messageTs == null)
                throw new ApiException(400, "Missing required parameter 'messageTs' when calling MessagesApi->ListMessages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 ListReactionsOfMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?))
        {
             ApiResponse<InlineResponse20052> localVarResponse = ListReactionsOfMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, listUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse<InlineResponse20052> ListReactionsOfMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ListReactionsOfMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ListReactionsOfMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ListReactionsOfMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (listUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_users", listUsers)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReactionsOfMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052> ListReactionsOfMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20052> localVarResponse = await ListReactionsOfMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, listUsers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> ListReactionsOfMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? listUsers = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ListReactionsOfMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ListReactionsOfMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ListReactionsOfMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (listUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_users", listUsers)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReactionsOfMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <returns></returns>
        public void RemoveExtraDataFromMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>))
        {
             RemoveExtraDataFromMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, keys);
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveExtraDataFromMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->RemoveExtraDataFromMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveExtraDataFromMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveExtraDataFromMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, keys, cancellationToken);

        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), List<string> keys = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->RemoveExtraDataFromMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 RemoveReactionFromAMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string))
        {
             ApiResponse<InlineResponse20053> localVarResponse = RemoveReactionFromAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, userId, reaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse<InlineResponse20053> RemoveReactionFromAMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->RemoveReactionFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->RemoveReactionFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (reaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reaction", reaction)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReactionFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> RemoveReactionFromAMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20053> localVarResponse = await RemoveReactionFromAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, userId, reaction, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  &gt; __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> RemoveReactionFromAMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), string userId = default(string), string reaction = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->RemoveReactionFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->RemoveReactionFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (reaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reaction", reaction)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReactionFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse SendMessage (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = SendMessageWithHttpInfo(channelType, channelUrl, apiToken, sendMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> SendMessageWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->SendMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->SendMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendMessageData != null && sendMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> SendMessageAsync (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await SendMessageWithHttpInfoAsync(channelType, channelUrl, apiToken, sendMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  &gt;__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendMessageWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->SendMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->SendMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendMessageData != null && sendMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse TranslateMessageIntoOtherLanguages (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = TranslateMessageIntoOtherLanguagesWithHttpInfo(channelType, channelUrl, messageId, apiToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->TranslateMessageIntoOtherLanguages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateMessageIntoOtherLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await TranslateMessageIntoOtherLanguagesWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  &gt; __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> TranslateMessageIntoOtherLanguagesWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), Object body = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->TranslateMessageIntoOtherLanguages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateMessageIntoOtherLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 UpdateExtraDataInMessage (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData))
        {
             ApiResponse<InlineResponse20054> localVarResponse = UpdateExtraDataInMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, updateExtraDataInMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse<InlineResponse20054> UpdateExtraDataInMessageWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->UpdateExtraDataInMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->UpdateExtraDataInMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInMessageData != null && updateExtraDataInMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054> UpdateExtraDataInMessageAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20054> localVarResponse = await UpdateExtraDataInMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, updateExtraDataInMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> UpdateExtraDataInMessageWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->UpdateExtraDataInMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->UpdateExtraDataInMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInMessageData != null && updateExtraDataInMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20054>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20054) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20054)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse UpdateMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = UpdateMessageByIdWithHttpInfo(channelType, channelUrl, messageId, apiToken, updateMessageByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> UpdateMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->UpdateMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->UpdateMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->UpdateMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateMessageByIdData != null && updateMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> UpdateMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await UpdateMessageByIdWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, updateMessageByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> UpdateMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->UpdateMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->UpdateMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->UpdateMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateMessageByIdData != null && updateMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse ViewMessageById (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = ViewMessageByIdWithHttpInfo(channelType, channelUrl, messageId, apiToken, withSortedMetaArray, withMetaArray);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> ViewMessageByIdWithHttpInfo (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ViewMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ViewMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ViewMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> ViewMessageByIdAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await ViewMessageByIdWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, withSortedMetaArray, withMetaArray, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;channel_type&#x60;      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  &#x60;channel_url&#x60;      Type: string      Description: Specifies the URL of the target channel.  &#x60;message_id&#x60;      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> ViewMessageByIdWithHttpInfoAsync (string channelType, string channelUrl, string messageId, string apiToken = default(string), bool? withSortedMetaArray = default(bool?), bool? withMetaArray = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ViewMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ViewMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagesApi->ViewMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 ViewTotalNumberOfMessagesInChannel (string channelType, string channelUrl, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20048> localVarResponse = ViewTotalNumberOfMessagesInChannelWithHttpInfo(channelType, channelUrl, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse<InlineResponse20048> ViewTotalNumberOfMessagesInChannelWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ViewTotalNumberOfMessagesInChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewTotalNumberOfMessagesInChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> ViewTotalNumberOfMessagesInChannelAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20048> localVarResponse = await ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync(channelType, channelUrl, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessagesApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessagesApi->ViewTotalNumberOfMessagesInChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewTotalNumberOfMessagesInChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

    }
}
