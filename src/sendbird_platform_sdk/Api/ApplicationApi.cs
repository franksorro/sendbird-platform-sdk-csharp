/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>AddApnsPushConfigurationResponse</returns>
        AddApnsPushConfigurationResponse AddApnsPushConfiguration (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData));

        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddApnsPushConfigurationResponse</returns>
        ApiResponse<AddApnsPushConfigurationResponse> AddApnsPushConfigurationWithHttpInfo (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData));
        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>AddFcmPushConfigurationResponse</returns>
        AddFcmPushConfigurationResponse AddFcmPushConfiguration (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData));

        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddFcmPushConfigurationResponse</returns>
        ApiResponse<AddFcmPushConfigurationResponse> AddFcmPushConfigurationWithHttpInfo (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData));
        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>AddHmsPushConfigurationResponse</returns>
        AddHmsPushConfigurationResponse AddHmsPushConfiguration (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData));

        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddHmsPushConfigurationResponse</returns>
        ApiResponse<AddHmsPushConfigurationResponse> AddHmsPushConfigurationWithHttpInfo (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData));
        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>AddIpToWhitelistResponse</returns>
        AddIpToWhitelistResponse AddIpToWhitelist (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData));

        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>ApiResponse of AddIpToWhitelistResponse</returns>
        ApiResponse<AddIpToWhitelistResponse> AddIpToWhitelistWithHttpInfo (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData));
        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>DeleteAllowedIpsFromWhitelistResponse</returns>
        DeleteAllowedIpsFromWhitelistResponse DeleteAllowedIpsFromWhitelist (List<string> ipWhitelistAddresses, string apiToken = default(string));

        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of DeleteAllowedIpsFromWhitelistResponse</returns>
        ApiResponse<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistWithHttpInfo (List<string> ipWhitelistAddresses, string apiToken = default(string));
        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>DeleteApnsCertificateByIdResponse</returns>
        DeleteApnsCertificateByIdResponse DeleteApnsCertificateById (string providerId, string apiToken = default(string));

        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of DeleteApnsCertificateByIdResponse</returns>
        ApiResponse<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdWithHttpInfo (string providerId, string apiToken = default(string));
        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>GenerateSecondaryApiTokenResponse</returns>
        GenerateSecondaryApiTokenResponse GenerateSecondaryApiToken (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData));

        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>ApiResponse of GenerateSecondaryApiTokenResponse</returns>
        ApiResponse<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenWithHttpInfo (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData));
        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListPushConfigurationsResponse</returns>
        ListPushConfigurationsResponse ListPushConfigurations (string pushType, string apiToken = default(string));

        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListPushConfigurationsResponse</returns>
        ApiResponse<ListPushConfigurationsResponse> ListPushConfigurationsWithHttpInfo (string pushType, string apiToken = default(string));
        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListPushNotificationContentTemplatesResponse</returns>
        ListPushNotificationContentTemplatesResponse ListPushNotificationContentTemplates (string apiToken = default(string));

        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListPushNotificationContentTemplatesResponse</returns>
        ApiResponse<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesWithHttpInfo (string apiToken = default(string));
        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListSecondaryApiTokensResponse</returns>
        ListSecondaryApiTokensResponse ListSecondaryApiTokens (string apiToken = default(string));

        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListSecondaryApiTokensResponse</returns>
        ApiResponse<ListSecondaryApiTokensResponse> ListSecondaryApiTokensWithHttpInfo (string apiToken = default(string));
        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RemovePushConfigurationByIdResponse</returns>
        RemovePushConfigurationByIdResponse RemovePushConfigurationById (string pushType, string providerId, string apiToken = default(string));

        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RemovePushConfigurationByIdResponse</returns>
        ApiResponse<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdWithHttpInfo (string pushType, string providerId, string apiToken = default(string));
        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RetrieveIpWhitelistResponse</returns>
        RetrieveIpWhitelistResponse RetrieveIpWhitelist (string apiToken = default(string));

        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RetrieveIpWhitelistResponse</returns>
        ApiResponse<RetrieveIpWhitelistResponse> RetrieveIpWhitelistWithHttpInfo (string apiToken = default(string));
        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RevokeSecondaryApiTokenByTokenResponse</returns>
        RevokeSecondaryApiTokenByTokenResponse RevokeSecondaryApiTokenByToken (string apiToken2, string apiToken = default(string));

        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RevokeSecondaryApiTokenByTokenResponse</returns>
        ApiResponse<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenWithHttpInfo (string apiToken2, string apiToken = default(string));
        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateApnsPushConfigurationByIdResponse</returns>
        UpdateApnsPushConfigurationByIdResponse UpdateApnsPushConfigurationById (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData));

        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateApnsPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData));
        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateDefaultChannelInvitationPreferenceResponse</returns>
        UpdateDefaultChannelInvitationPreferenceResponse UpdateDefaultChannelInvitationPreference (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData));

        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData));
        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateFcmPushConfigurationByIdResponse</returns>
        UpdateFcmPushConfigurationByIdResponse UpdateFcmPushConfigurationById (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData));

        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateFcmPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData));
        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateHmsPushConfigurationByIdResponse</returns>
        UpdateHmsPushConfigurationByIdResponse UpdateHmsPushConfigurationById (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData));

        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateHmsPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData));
        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>UpdatePushNotificationContentTemplateResponse</returns>
        UpdatePushNotificationContentTemplateResponse UpdatePushNotificationContentTemplate (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData));

        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushNotificationContentTemplateResponse</returns>
        ApiResponse<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateWithHttpInfo (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData));
        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewDefaultChannelInvitationPreferenceResponse</returns>
        ViewDefaultChannelInvitationPreferenceResponse ViewDefaultChannelInvitationPreference (string apiToken = default(string));

        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewDefaultChannelInvitationPreferenceResponse</returns>
        ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken = default(string));
        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewNumberOfConcurrentConnectionsResponse</returns>
        ViewNumberOfConcurrentConnectionsResponse ViewNumberOfConcurrentConnections (string apiToken = default(string));

        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfConcurrentConnectionsResponse</returns>
        ApiResponse<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsWithHttpInfo (string apiToken = default(string));
        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfDailyActiveUsersResponse</returns>
        ViewNumberOfDailyActiveUsersResponse ViewNumberOfDailyActiveUsers (string apiToken = default(string), string date = default(string));

        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfDailyActiveUsersResponse</returns>
        ApiResponse<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersWithHttpInfo (string apiToken = default(string), string date = default(string));
        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfMonthlyActiveUsersResponse</returns>
        ViewNumberOfMonthlyActiveUsersResponse ViewNumberOfMonthlyActiveUsers (string apiToken = default(string), string date = default(string));

        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfMonthlyActiveUsersResponse</returns>
        ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersWithHttpInfo (string apiToken = default(string), string date = default(string));
        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ViewNumberOfPeakConnectionsResponse</returns>
        ViewNumberOfPeakConnectionsResponse ViewNumberOfPeakConnections (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?));

        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfPeakConnectionsResponse</returns>
        ApiResponse<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsWithHttpInfo (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?));
        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewPushConfigurationByIdResponse</returns>
        ViewPushConfigurationByIdResponse ViewPushConfigurationById (string pushType, string providerId, string apiToken = default(string));

        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewPushConfigurationByIdResponse</returns>
        ApiResponse<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdWithHttpInfo (string pushType, string providerId, string apiToken = default(string));
        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewPushNotificationContentTemplateResponse</returns>
        ViewPushNotificationContentTemplateResponse ViewPushNotificationContentTemplate (string templateName, string apiToken = default(string));

        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewPushNotificationContentTemplateResponse</returns>
        ApiResponse<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateWithHttpInfo (string templateName, string apiToken = default(string));
        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewSecondaryApiTokenByTokenResponse</returns>
        ViewSecondaryApiTokenByTokenResponse ViewSecondaryApiTokenByToken (string apiToken2, string apiToken = default(string));

        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewSecondaryApiTokenByTokenResponse</returns>
        ApiResponse<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenWithHttpInfo (string apiToken2, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddApnsPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddApnsPushConfigurationResponse> AddApnsPushConfigurationAsync (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddApnsPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddApnsPushConfigurationResponse>> AddApnsPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddFcmPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddFcmPushConfigurationResponse> AddFcmPushConfigurationAsync (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddFcmPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddFcmPushConfigurationResponse>> AddFcmPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddHmsPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddHmsPushConfigurationResponse> AddHmsPushConfigurationAsync (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddHmsPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddHmsPushConfigurationResponse>> AddHmsPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddIpToWhitelistResponse</returns>
        System.Threading.Tasks.Task<AddIpToWhitelistResponse> AddIpToWhitelistAsync (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddIpToWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddIpToWhitelistResponse>> AddIpToWhitelistWithHttpInfoAsync (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAllowedIpsFromWhitelistResponse</returns>
        System.Threading.Tasks.Task<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistAsync (List<string> ipWhitelistAddresses, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAllowedIpsFromWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAllowedIpsFromWhitelistResponse>> DeleteAllowedIpsFromWhitelistWithHttpInfoAsync (List<string> ipWhitelistAddresses, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteApnsCertificateByIdResponse</returns>
        System.Threading.Tasks.Task<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdAsync (string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteApnsCertificateByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteApnsCertificateByIdResponse>> DeleteApnsCertificateByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GenerateSecondaryApiTokenResponse</returns>
        System.Threading.Tasks.Task<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenAsync (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GenerateSecondaryApiTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateSecondaryApiTokenResponse>> GenerateSecondaryApiTokenWithHttpInfoAsync (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushConfigurationsResponse</returns>
        System.Threading.Tasks.Task<ListPushConfigurationsResponse> ListPushConfigurationsAsync (string pushType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushConfigurationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPushConfigurationsResponse>> ListPushConfigurationsWithHttpInfoAsync (string pushType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushNotificationContentTemplatesResponse</returns>
        System.Threading.Tasks.Task<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushNotificationContentTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPushNotificationContentTemplatesResponse>> ListPushNotificationContentTemplatesWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListSecondaryApiTokensResponse</returns>
        System.Threading.Tasks.Task<ListSecondaryApiTokensResponse> ListSecondaryApiTokensAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListSecondaryApiTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSecondaryApiTokensResponse>> ListSecondaryApiTokensWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemovePushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemovePushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemovePushConfigurationByIdResponse>> RemovePushConfigurationByIdWithHttpInfoAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveIpWhitelistResponse</returns>
        System.Threading.Tasks.Task<RetrieveIpWhitelistResponse> RetrieveIpWhitelistAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveIpWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveIpWhitelistResponse>> RetrieveIpWhitelistWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RevokeSecondaryApiTokenByTokenResponse</returns>
        System.Threading.Tasks.Task<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RevokeSecondaryApiTokenByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevokeSecondaryApiTokenByTokenResponse>> RevokeSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateApnsPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateApnsPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateApnsPushConfigurationByIdResponse>> UpdateApnsPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceAsync (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateDefaultChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>> UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateFcmPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateFcmPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFcmPushConfigurationByIdResponse>> UpdateFcmPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateHmsPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateHmsPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateHmsPushConfigurationByIdResponse>> UpdateHmsPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushNotificationContentTemplateResponse</returns>
        System.Threading.Tasks.Task<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateAsync (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushNotificationContentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePushNotificationContentTemplateResponse>> UpdatePushNotificationContentTemplateWithHttpInfoAsync (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewDefaultChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewDefaultChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>> ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfConcurrentConnectionsResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfConcurrentConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfConcurrentConnectionsResponse>> ViewNumberOfConcurrentConnectionsWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfDailyActiveUsersResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfDailyActiveUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfDailyActiveUsersResponse>> ViewNumberOfDailyActiveUsersWithHttpInfoAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfMonthlyActiveUsersResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfMonthlyActiveUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>> ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfPeakConnectionsResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsAsync (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfPeakConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfPeakConnectionsResponse>> ViewNumberOfPeakConnectionsWithHttpInfoAsync (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushConfigurationByIdResponse>> ViewPushConfigurationByIdWithHttpInfoAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushNotificationContentTemplateResponse</returns>
        System.Threading.Tasks.Task<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateAsync (string templateName, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushNotificationContentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushNotificationContentTemplateResponse>> ViewPushNotificationContentTemplateWithHttpInfoAsync (string templateName, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewSecondaryApiTokenByTokenResponse</returns>
        System.Threading.Tasks.Task<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewSecondaryApiTokenByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewSecondaryApiTokenByTokenResponse>> ViewSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>AddApnsPushConfigurationResponse</returns>
        public AddApnsPushConfigurationResponse AddApnsPushConfiguration (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData))
        {
             ApiResponse<AddApnsPushConfigurationResponse> localVarResponse = AddApnsPushConfigurationWithHttpInfo(apiToken, addApnsPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddApnsPushConfigurationResponse</returns>
        public ApiResponse<AddApnsPushConfigurationResponse> AddApnsPushConfigurationWithHttpInfo (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData))
        {

            var localVarPath = "/v3/applications/push/apns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addApnsPushConfigurationData != null && addApnsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addApnsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addApnsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApnsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddApnsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddApnsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddApnsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddApnsPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddApnsPushConfigurationResponse> AddApnsPushConfigurationAsync (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddApnsPushConfigurationResponse> localVarResponse = await AddApnsPushConfigurationWithHttpInfoAsync(apiToken, addApnsPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddApnsPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddApnsPushConfigurationResponse>> AddApnsPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/push/apns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addApnsPushConfigurationData != null && addApnsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addApnsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addApnsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApnsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddApnsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddApnsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddApnsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>AddFcmPushConfigurationResponse</returns>
        public AddFcmPushConfigurationResponse AddFcmPushConfiguration (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData))
        {
             ApiResponse<AddFcmPushConfigurationResponse> localVarResponse = AddFcmPushConfigurationWithHttpInfo(apiToken, addFcmPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddFcmPushConfigurationResponse</returns>
        public ApiResponse<AddFcmPushConfigurationResponse> AddFcmPushConfigurationWithHttpInfo (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData))
        {

            var localVarPath = "/v3/applications/push/fcm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addFcmPushConfigurationData != null && addFcmPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFcmPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFcmPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFcmPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFcmPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddFcmPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFcmPushConfigurationResponse)));
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddFcmPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddFcmPushConfigurationResponse> AddFcmPushConfigurationAsync (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddFcmPushConfigurationResponse> localVarResponse = await AddFcmPushConfigurationWithHttpInfoAsync(apiToken, addFcmPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddFcmPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddFcmPushConfigurationResponse>> AddFcmPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/push/fcm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addFcmPushConfigurationData != null && addFcmPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFcmPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFcmPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFcmPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFcmPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddFcmPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFcmPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>AddHmsPushConfigurationResponse</returns>
        public AddHmsPushConfigurationResponse AddHmsPushConfiguration (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData))
        {
             ApiResponse<AddHmsPushConfigurationResponse> localVarResponse = AddHmsPushConfigurationWithHttpInfo(apiToken, addHmsPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddHmsPushConfigurationResponse</returns>
        public ApiResponse<AddHmsPushConfigurationResponse> AddHmsPushConfigurationWithHttpInfo (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData))
        {

            var localVarPath = "/v3/applications/push/hms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addHmsPushConfigurationData != null && addHmsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addHmsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addHmsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHmsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddHmsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddHmsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddHmsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddHmsPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddHmsPushConfigurationResponse> AddHmsPushConfigurationAsync (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddHmsPushConfigurationResponse> localVarResponse = await AddHmsPushConfigurationWithHttpInfoAsync(apiToken, addHmsPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddHmsPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddHmsPushConfigurationResponse>> AddHmsPushConfigurationWithHttpInfoAsync (string apiToken = default(string), AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/push/hms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addHmsPushConfigurationData != null && addHmsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addHmsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addHmsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHmsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddHmsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddHmsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddHmsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>AddIpToWhitelistResponse</returns>
        public AddIpToWhitelistResponse AddIpToWhitelist (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData))
        {
             ApiResponse<AddIpToWhitelistResponse> localVarResponse = AddIpToWhitelistWithHttpInfo(apiToken, addIpToWhitelistData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>ApiResponse of AddIpToWhitelistResponse</returns>
        public ApiResponse<AddIpToWhitelistResponse> AddIpToWhitelistWithHttpInfo (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData))
        {

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addIpToWhitelistData != null && addIpToWhitelistData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addIpToWhitelistData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addIpToWhitelistData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIpToWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddIpToWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddIpToWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddIpToWhitelistResponse)));
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddIpToWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<AddIpToWhitelistResponse> AddIpToWhitelistAsync (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddIpToWhitelistResponse> localVarResponse = await AddIpToWhitelistWithHttpInfoAsync(apiToken, addIpToWhitelistData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddIpToWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddIpToWhitelistResponse>> AddIpToWhitelistWithHttpInfoAsync (string apiToken = default(string), AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addIpToWhitelistData != null && addIpToWhitelistData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addIpToWhitelistData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addIpToWhitelistData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIpToWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddIpToWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddIpToWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddIpToWhitelistResponse)));
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>DeleteAllowedIpsFromWhitelistResponse</returns>
        public DeleteAllowedIpsFromWhitelistResponse DeleteAllowedIpsFromWhitelist (List<string> ipWhitelistAddresses, string apiToken = default(string))
        {
             ApiResponse<DeleteAllowedIpsFromWhitelistResponse> localVarResponse = DeleteAllowedIpsFromWhitelistWithHttpInfo(ipWhitelistAddresses, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of DeleteAllowedIpsFromWhitelistResponse</returns>
        public ApiResponse<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistWithHttpInfo (List<string> ipWhitelistAddresses, string apiToken = default(string))
        {
            // verify the required parameter 'ipWhitelistAddresses' is set
            if (ipWhitelistAddresses == null)
                throw new ApiException(400, "Missing required parameter 'ipWhitelistAddresses' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ipWhitelistAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ip_whitelist_addresses", ipWhitelistAddresses)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllowedIpsFromWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAllowedIpsFromWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAllowedIpsFromWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAllowedIpsFromWhitelistResponse)));
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAllowedIpsFromWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistAsync (List<string> ipWhitelistAddresses, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteAllowedIpsFromWhitelistResponse> localVarResponse = await DeleteAllowedIpsFromWhitelistWithHttpInfoAsync(ipWhitelistAddresses, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAllowedIpsFromWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAllowedIpsFromWhitelistResponse>> DeleteAllowedIpsFromWhitelistWithHttpInfoAsync (List<string> ipWhitelistAddresses, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ipWhitelistAddresses' is set
            if (ipWhitelistAddresses == null)
                throw new ApiException(400, "Missing required parameter 'ipWhitelistAddresses' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ipWhitelistAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ip_whitelist_addresses", ipWhitelistAddresses)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllowedIpsFromWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAllowedIpsFromWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAllowedIpsFromWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAllowedIpsFromWhitelistResponse)));
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>DeleteApnsCertificateByIdResponse</returns>
        public DeleteApnsCertificateByIdResponse DeleteApnsCertificateById (string providerId, string apiToken = default(string))
        {
             ApiResponse<DeleteApnsCertificateByIdResponse> localVarResponse = DeleteApnsCertificateByIdWithHttpInfo(providerId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of DeleteApnsCertificateByIdResponse</returns>
        public ApiResponse<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdWithHttpInfo (string providerId, string apiToken = default(string))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->DeleteApnsCertificateById");

            var localVarPath = "/v3/applications/push/apns/cert/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApnsCertificateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApnsCertificateByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteApnsCertificateByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApnsCertificateByIdResponse)));
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteApnsCertificateByIdResponse</returns>
        public async System.Threading.Tasks.Task<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdAsync (string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteApnsCertificateByIdResponse> localVarResponse = await DeleteApnsCertificateByIdWithHttpInfoAsync(providerId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteApnsCertificateByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteApnsCertificateByIdResponse>> DeleteApnsCertificateByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->DeleteApnsCertificateById");

            var localVarPath = "/v3/applications/push/apns/cert/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApnsCertificateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApnsCertificateByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteApnsCertificateByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApnsCertificateByIdResponse)));
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>GenerateSecondaryApiTokenResponse</returns>
        public GenerateSecondaryApiTokenResponse GenerateSecondaryApiToken (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData))
        {
             ApiResponse<GenerateSecondaryApiTokenResponse> localVarResponse = GenerateSecondaryApiTokenWithHttpInfo(apiToken, generateSecondaryApiTokenData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>ApiResponse of GenerateSecondaryApiTokenResponse</returns>
        public ApiResponse<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenWithHttpInfo (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData))
        {

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (generateSecondaryApiTokenData != null && generateSecondaryApiTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSecondaryApiTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSecondaryApiTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSecondaryApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSecondaryApiTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenerateSecondaryApiTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSecondaryApiTokenResponse)));
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GenerateSecondaryApiTokenResponse</returns>
        public async System.Threading.Tasks.Task<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenAsync (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GenerateSecondaryApiTokenResponse> localVarResponse = await GenerateSecondaryApiTokenWithHttpInfoAsync(apiToken, generateSecondaryApiTokenData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GenerateSecondaryApiTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateSecondaryApiTokenResponse>> GenerateSecondaryApiTokenWithHttpInfoAsync (string apiToken = default(string), GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (generateSecondaryApiTokenData != null && generateSecondaryApiTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSecondaryApiTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSecondaryApiTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSecondaryApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSecondaryApiTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenerateSecondaryApiTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSecondaryApiTokenResponse)));
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListPushConfigurationsResponse</returns>
        public ListPushConfigurationsResponse ListPushConfigurations (string pushType, string apiToken = default(string))
        {
             ApiResponse<ListPushConfigurationsResponse> localVarResponse = ListPushConfigurationsWithHttpInfo(pushType, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListPushConfigurationsResponse</returns>
        public ApiResponse<ListPushConfigurationsResponse> ListPushConfigurationsWithHttpInfo (string pushType, string apiToken = default(string))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ListPushConfigurations");

            var localVarPath = "/v3/applications/push/{push_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushConfigurationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushConfigurationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushConfigurationsResponse)));
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushConfigurationsResponse</returns>
        public async System.Threading.Tasks.Task<ListPushConfigurationsResponse> ListPushConfigurationsAsync (string pushType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListPushConfigurationsResponse> localVarResponse = await ListPushConfigurationsWithHttpInfoAsync(pushType, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application&#39;s registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushConfigurationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPushConfigurationsResponse>> ListPushConfigurationsWithHttpInfoAsync (string pushType, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ListPushConfigurations");

            var localVarPath = "/v3/applications/push/{push_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushConfigurationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushConfigurationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushConfigurationsResponse)));
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListPushNotificationContentTemplatesResponse</returns>
        public ListPushNotificationContentTemplatesResponse ListPushNotificationContentTemplates (string apiToken = default(string))
        {
             ApiResponse<ListPushNotificationContentTemplatesResponse> localVarResponse = ListPushNotificationContentTemplatesWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListPushNotificationContentTemplatesResponse</returns>
        public ApiResponse<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesWithHttpInfo (string apiToken = default(string))
        {

            var localVarPath = "/v3/applications/push/message_templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushNotificationContentTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushNotificationContentTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushNotificationContentTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushNotificationContentTemplatesResponse)));
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushNotificationContentTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListPushNotificationContentTemplatesResponse> localVarResponse = await ListPushNotificationContentTemplatesWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushNotificationContentTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPushNotificationContentTemplatesResponse>> ListPushNotificationContentTemplatesWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/push/message_templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushNotificationContentTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushNotificationContentTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushNotificationContentTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushNotificationContentTemplatesResponse)));
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListSecondaryApiTokensResponse</returns>
        public ListSecondaryApiTokensResponse ListSecondaryApiTokens (string apiToken = default(string))
        {
             ApiResponse<ListSecondaryApiTokensResponse> localVarResponse = ListSecondaryApiTokensWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListSecondaryApiTokensResponse</returns>
        public ApiResponse<ListSecondaryApiTokensResponse> ListSecondaryApiTokensWithHttpInfo (string apiToken = default(string))
        {

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSecondaryApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSecondaryApiTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSecondaryApiTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSecondaryApiTokensResponse)));
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListSecondaryApiTokensResponse</returns>
        public async System.Threading.Tasks.Task<ListSecondaryApiTokensResponse> ListSecondaryApiTokensAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListSecondaryApiTokensResponse> localVarResponse = await ListSecondaryApiTokensWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListSecondaryApiTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSecondaryApiTokensResponse>> ListSecondaryApiTokensWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSecondaryApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSecondaryApiTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSecondaryApiTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSecondaryApiTokensResponse)));
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RemovePushConfigurationByIdResponse</returns>
        public RemovePushConfigurationByIdResponse RemovePushConfigurationById (string pushType, string providerId, string apiToken = default(string))
        {
             ApiResponse<RemovePushConfigurationByIdResponse> localVarResponse = RemovePushConfigurationByIdWithHttpInfo(pushType, providerId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RemovePushConfigurationByIdResponse</returns>
        public ApiResponse<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdWithHttpInfo (string pushType, string providerId, string apiToken = default(string))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->RemovePushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovePushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemovePushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovePushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemovePushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RemovePushConfigurationByIdResponse> localVarResponse = await RemovePushConfigurationByIdWithHttpInfoAsync(pushType, providerId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemovePushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemovePushConfigurationByIdResponse>> RemovePushConfigurationByIdWithHttpInfoAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->RemovePushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovePushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemovePushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovePushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RetrieveIpWhitelistResponse</returns>
        public RetrieveIpWhitelistResponse RetrieveIpWhitelist (string apiToken = default(string))
        {
             ApiResponse<RetrieveIpWhitelistResponse> localVarResponse = RetrieveIpWhitelistWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RetrieveIpWhitelistResponse</returns>
        public ApiResponse<RetrieveIpWhitelistResponse> RetrieveIpWhitelistWithHttpInfo (string apiToken = default(string))
        {

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveIpWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveIpWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveIpWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveIpWhitelistResponse)));
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveIpWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveIpWhitelistResponse> RetrieveIpWhitelistAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RetrieveIpWhitelistResponse> localVarResponse = await RetrieveIpWhitelistWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don&#39;t specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings &gt; Security &gt; Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveIpWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveIpWhitelistResponse>> RetrieveIpWhitelistWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveIpWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveIpWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveIpWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveIpWhitelistResponse)));
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>RevokeSecondaryApiTokenByTokenResponse</returns>
        public RevokeSecondaryApiTokenByTokenResponse RevokeSecondaryApiTokenByToken (string apiToken2, string apiToken = default(string))
        {
             ApiResponse<RevokeSecondaryApiTokenByTokenResponse> localVarResponse = RevokeSecondaryApiTokenByTokenWithHttpInfo(apiToken2, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of RevokeSecondaryApiTokenByTokenResponse</returns>
        public ApiResponse<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenWithHttpInfo (string apiToken2, string apiToken = default(string))
        {
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RevokeSecondaryApiTokenByTokenResponse</returns>
        public async System.Threading.Tasks.Task<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RevokeSecondaryApiTokenByTokenResponse> localVarResponse = await RevokeSecondaryApiTokenByTokenWithHttpInfoAsync(apiToken2, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RevokeSecondaryApiTokenByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevokeSecondaryApiTokenByTokenResponse>> RevokeSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateApnsPushConfigurationByIdResponse</returns>
        public UpdateApnsPushConfigurationByIdResponse UpdateApnsPushConfigurationById (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData))
        {
             ApiResponse<UpdateApnsPushConfigurationByIdResponse> localVarResponse = UpdateApnsPushConfigurationByIdWithHttpInfo(providerId, apiToken, updateApnsPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateApnsPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateApnsPushConfigurationById");

            var localVarPath = "/v3/applications/push/apns/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateApnsPushConfigurationByIdData != null && updateApnsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateApnsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateApnsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApnsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateApnsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateApnsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateApnsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateApnsPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateApnsPushConfigurationByIdResponse> localVarResponse = await UpdateApnsPushConfigurationByIdWithHttpInfoAsync(providerId, apiToken, updateApnsPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  &gt; __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateApnsPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateApnsPushConfigurationByIdResponse>> UpdateApnsPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateApnsPushConfigurationById");

            var localVarPath = "/v3/applications/push/apns/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateApnsPushConfigurationByIdData != null && updateApnsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateApnsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateApnsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApnsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateApnsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateApnsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateApnsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public UpdateDefaultChannelInvitationPreferenceResponse UpdateDefaultChannelInvitationPreference (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData))
        {
             ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> localVarResponse = UpdateDefaultChannelInvitationPreferenceWithHttpInfo(apiToken, updateDefaultChannelInvitationPreferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData))
        {

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateDefaultChannelInvitationPreferenceData != null && updateDefaultChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDefaultChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDefaultChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceAsync (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> localVarResponse = await UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync(apiToken, updateDefaultChannelInvitationPreferenceData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  &gt; __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateDefaultChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>> UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken = default(string), UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateDefaultChannelInvitationPreferenceData != null && updateDefaultChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDefaultChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDefaultChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateFcmPushConfigurationByIdResponse</returns>
        public UpdateFcmPushConfigurationByIdResponse UpdateFcmPushConfigurationById (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData))
        {
             ApiResponse<UpdateFcmPushConfigurationByIdResponse> localVarResponse = UpdateFcmPushConfigurationByIdWithHttpInfo(providerId, apiToken, updateFcmPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateFcmPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateFcmPushConfigurationById");

            var localVarPath = "/v3/applications/push/fcm/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateFcmPushConfigurationByIdData != null && updateFcmPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFcmPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFcmPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFcmPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFcmPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateFcmPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFcmPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateFcmPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateFcmPushConfigurationByIdResponse> localVarResponse = await UpdateFcmPushConfigurationByIdWithHttpInfoAsync(providerId, apiToken, updateFcmPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateFcmPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateFcmPushConfigurationByIdResponse>> UpdateFcmPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateFcmPushConfigurationById");

            var localVarPath = "/v3/applications/push/fcm/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateFcmPushConfigurationByIdData != null && updateFcmPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFcmPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFcmPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFcmPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFcmPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateFcmPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFcmPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateHmsPushConfigurationByIdResponse</returns>
        public UpdateHmsPushConfigurationByIdResponse UpdateHmsPushConfigurationById (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData))
        {
             ApiResponse<UpdateHmsPushConfigurationByIdResponse> localVarResponse = UpdateHmsPushConfigurationByIdWithHttpInfo(providerId, apiToken, updateHmsPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateHmsPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdWithHttpInfo (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateHmsPushConfigurationById");

            var localVarPath = "/v3/applications/push/hms/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateHmsPushConfigurationByIdData != null && updateHmsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateHmsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateHmsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHmsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateHmsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateHmsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateHmsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateHmsPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdAsync (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateHmsPushConfigurationByIdResponse> localVarResponse = await UpdateHmsPushConfigurationByIdWithHttpInfoAsync(providerId, apiToken, updateHmsPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings &gt; Application &gt; Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateHmsPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateHmsPushConfigurationByIdResponse>> UpdateHmsPushConfigurationByIdWithHttpInfoAsync (string providerId, string apiToken = default(string), UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateHmsPushConfigurationById");

            var localVarPath = "/v3/applications/push/hms/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateHmsPushConfigurationByIdData != null && updateHmsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateHmsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateHmsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHmsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateHmsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateHmsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateHmsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>UpdatePushNotificationContentTemplateResponse</returns>
        public UpdatePushNotificationContentTemplateResponse UpdatePushNotificationContentTemplate (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData))
        {
             ApiResponse<UpdatePushNotificationContentTemplateResponse> localVarResponse = UpdatePushNotificationContentTemplateWithHttpInfo(templateName, apiToken, updatePushNotificationContentTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushNotificationContentTemplateResponse</returns>
        public ApiResponse<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateWithHttpInfo (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->UpdatePushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushNotificationContentTemplateData != null && updatePushNotificationContentTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushNotificationContentTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushNotificationContentTemplateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushNotificationContentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateAsync (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdatePushNotificationContentTemplateResponse> localVarResponse = await UpdatePushNotificationContentTemplateWithHttpInfoAsync(templateName, apiToken, updatePushNotificationContentTemplateData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushNotificationContentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePushNotificationContentTemplateResponse>> UpdatePushNotificationContentTemplateWithHttpInfoAsync (string templateName, string apiToken = default(string), UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->UpdatePushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushNotificationContentTemplateData != null && updatePushNotificationContentTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushNotificationContentTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushNotificationContentTemplateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewDefaultChannelInvitationPreferenceResponse</returns>
        public ViewDefaultChannelInvitationPreferenceResponse ViewDefaultChannelInvitationPreference (string apiToken = default(string))
        {
             ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> localVarResponse = ViewDefaultChannelInvitationPreferenceWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewDefaultChannelInvitationPreferenceResponse</returns>
        public ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken = default(string))
        {

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewDefaultChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> localVarResponse = await ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  &gt; __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user&#39;s channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewDefaultChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>> ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewNumberOfConcurrentConnectionsResponse</returns>
        public ViewNumberOfConcurrentConnectionsResponse ViewNumberOfConcurrentConnections (string apiToken = default(string))
        {
             ApiResponse<ViewNumberOfConcurrentConnectionsResponse> localVarResponse = ViewNumberOfConcurrentConnectionsWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfConcurrentConnectionsResponse</returns>
        public ApiResponse<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsWithHttpInfo (string apiToken = default(string))
        {

            var localVarPath = "/v3/applications/ccu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfConcurrentConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfConcurrentConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfConcurrentConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfConcurrentConnectionsResponse)));
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfConcurrentConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewNumberOfConcurrentConnectionsResponse> localVarResponse = await ViewNumberOfConcurrentConnectionsWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfConcurrentConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfConcurrentConnectionsResponse>> ViewNumberOfConcurrentConnectionsWithHttpInfoAsync (string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/ccu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfConcurrentConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfConcurrentConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfConcurrentConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfConcurrentConnectionsResponse)));
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfDailyActiveUsersResponse</returns>
        public ViewNumberOfDailyActiveUsersResponse ViewNumberOfDailyActiveUsers (string apiToken = default(string), string date = default(string))
        {
             ApiResponse<ViewNumberOfDailyActiveUsersResponse> localVarResponse = ViewNumberOfDailyActiveUsersWithHttpInfo(apiToken, date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfDailyActiveUsersResponse</returns>
        public ApiResponse<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersWithHttpInfo (string apiToken = default(string), string date = default(string))
        {

            var localVarPath = "/v3/applications/dau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfDailyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfDailyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfDailyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfDailyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfDailyActiveUsersResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewNumberOfDailyActiveUsersResponse> localVarResponse = await ViewNumberOfDailyActiveUsersWithHttpInfoAsync(apiToken, date, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfDailyActiveUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfDailyActiveUsersResponse>> ViewNumberOfDailyActiveUsersWithHttpInfoAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/dau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfDailyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfDailyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfDailyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfDailyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfMonthlyActiveUsersResponse</returns>
        public ViewNumberOfMonthlyActiveUsersResponse ViewNumberOfMonthlyActiveUsers (string apiToken = default(string), string date = default(string))
        {
             ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> localVarResponse = ViewNumberOfMonthlyActiveUsersWithHttpInfo(apiToken, date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfMonthlyActiveUsersResponse</returns>
        public ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersWithHttpInfo (string apiToken = default(string), string date = default(string))
        {

            var localVarPath = "/v3/applications/mau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfMonthlyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfMonthlyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfMonthlyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfMonthlyActiveUsersResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> localVarResponse = await ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync(apiToken, date, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfMonthlyActiveUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>> ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync (string apiToken = default(string), string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/applications/mau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfMonthlyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfMonthlyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfMonthlyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ViewNumberOfPeakConnectionsResponse</returns>
        public ViewNumberOfPeakConnectionsResponse ViewNumberOfPeakConnections (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?))
        {
             ApiResponse<ViewNumberOfPeakConnectionsResponse> localVarResponse = ViewNumberOfPeakConnectionsWithHttpInfo(timeDimension, startYear, startMonth, endYear, endMonth, apiToken, startDay, endDay);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfPeakConnectionsResponse</returns>
        public ApiResponse<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsWithHttpInfo (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?))
        {
            // verify the required parameter 'timeDimension' is set
            if (timeDimension == null)
                throw new ApiException(400, "Missing required parameter 'timeDimension' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startYear' is set
            if (startYear == null)
                throw new ApiException(400, "Missing required parameter 'startYear' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startMonth' is set
            if (startMonth == null)
                throw new ApiException(400, "Missing required parameter 'startMonth' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endYear' is set
            if (endYear == null)
                throw new ApiException(400, "Missing required parameter 'endYear' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endMonth' is set
            if (endMonth == null)
                throw new ApiException(400, "Missing required parameter 'endMonth' when calling ApplicationApi->ViewNumberOfPeakConnections");

            var localVarPath = "/v3/applications/peak_connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeDimension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_dimension", timeDimension)); // query parameter
            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_year", startYear)); // query parameter
            if (startMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_month", startMonth)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_year", endYear)); // query parameter
            if (endMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_month", endMonth)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_day", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_day", endDay)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfPeakConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfPeakConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfPeakConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfPeakConnectionsResponse)));
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfPeakConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsAsync (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewNumberOfPeakConnectionsResponse> localVarResponse = await ViewNumberOfPeakConnectionsWithHttpInfoAsync(timeDimension, startYear, startMonth, endYear, endMonth, apiToken, startDay, endDay, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfPeakConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfPeakConnectionsResponse>> ViewNumberOfPeakConnectionsWithHttpInfoAsync (string timeDimension, int startYear, int startMonth, int endYear, int endMonth, string apiToken = default(string), int? startDay = default(int?), int? endDay = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timeDimension' is set
            if (timeDimension == null)
                throw new ApiException(400, "Missing required parameter 'timeDimension' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startYear' is set
            if (startYear == null)
                throw new ApiException(400, "Missing required parameter 'startYear' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startMonth' is set
            if (startMonth == null)
                throw new ApiException(400, "Missing required parameter 'startMonth' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endYear' is set
            if (endYear == null)
                throw new ApiException(400, "Missing required parameter 'endYear' when calling ApplicationApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endMonth' is set
            if (endMonth == null)
                throw new ApiException(400, "Missing required parameter 'endMonth' when calling ApplicationApi->ViewNumberOfPeakConnections");

            var localVarPath = "/v3/applications/peak_connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeDimension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_dimension", timeDimension)); // query parameter
            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_year", startYear)); // query parameter
            if (startMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_month", startMonth)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_year", endYear)); // query parameter
            if (endMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_month", endMonth)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_day", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_day", endDay)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfPeakConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfPeakConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfPeakConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfPeakConnectionsResponse)));
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewPushConfigurationByIdResponse</returns>
        public ViewPushConfigurationByIdResponse ViewPushConfigurationById (string pushType, string providerId, string apiToken = default(string))
        {
             ApiResponse<ViewPushConfigurationByIdResponse> localVarResponse = ViewPushConfigurationByIdWithHttpInfo(pushType, providerId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewPushConfigurationByIdResponse</returns>
        public ApiResponse<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdWithHttpInfo (string pushType, string providerId, string apiToken = default(string))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->ViewPushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewPushConfigurationByIdResponse> localVarResponse = await ViewPushConfigurationByIdWithHttpInfoAsync(pushType, providerId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either &#x60;fcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushConfigurationByIdResponse>> ViewPushConfigurationByIdWithHttpInfoAsync (string pushType, string providerId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->ViewPushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewPushNotificationContentTemplateResponse</returns>
        public ViewPushNotificationContentTemplateResponse ViewPushNotificationContentTemplate (string templateName, string apiToken = default(string))
        {
             ApiResponse<ViewPushNotificationContentTemplateResponse> localVarResponse = ViewPushNotificationContentTemplateWithHttpInfo(templateName, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewPushNotificationContentTemplateResponse</returns>
        public ApiResponse<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateWithHttpInfo (string templateName, string apiToken = default(string))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->ViewPushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushNotificationContentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateAsync (string templateName, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewPushNotificationContentTemplateResponse> localVarResponse = await ViewPushNotificationContentTemplateWithHttpInfoAsync(templateName, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either &#x60;default&#x60; or &#x60;alternative&#x60;.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushNotificationContentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushNotificationContentTemplateResponse>> ViewPushNotificationContentTemplateWithHttpInfoAsync (string templateName, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->ViewPushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ViewSecondaryApiTokenByTokenResponse</returns>
        public ViewSecondaryApiTokenByTokenResponse ViewSecondaryApiTokenByToken (string apiToken2, string apiToken = default(string))
        {
             ApiResponse<ViewSecondaryApiTokenByTokenResponse> localVarResponse = ViewSecondaryApiTokenByTokenWithHttpInfo(apiToken2, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ViewSecondaryApiTokenByTokenResponse</returns>
        public ApiResponse<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenWithHttpInfo (string apiToken2, string apiToken = default(string))
        {
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->ViewSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewSecondaryApiTokenByTokenResponse</returns>
        public async System.Threading.Tasks.Task<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ViewSecondaryApiTokenByTokenResponse> localVarResponse = await ViewSecondaryApiTokenByTokenWithHttpInfoAsync(apiToken2, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken2"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewSecondaryApiTokenByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewSecondaryApiTokenByTokenResponse>> ViewSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken2, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->ViewSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewSecondaryApiTokenByTokenResponse)));
        }

    }
}
