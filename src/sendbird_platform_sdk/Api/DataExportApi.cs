/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataExportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List data exports by message, channel, or user
        /// </summary>
        /// <remarks>
        /// ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20063</returns>
        InlineResponse20063 ListDataExportsByMessageChannelOrUser (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?));

        /// <summary>
        /// List data exports by message, channel, or user
        /// </summary>
        /// <remarks>
        /// ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        ApiResponse<InlineResponse20063> ListDataExportsByMessageChannelOrUserWithHttpInfo (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?));
        /// <summary>
        /// Register and schedule a data export
        /// </summary>
        /// <remarks>
        /// ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <returns>InlineResponse20063ExportedData</returns>
        InlineResponse20063ExportedData RegisterAndScheduleDataExport (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData));

        /// <summary>
        /// Register and schedule a data export
        /// </summary>
        /// <remarks>
        /// ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063ExportedData</returns>
        ApiResponse<InlineResponse20063ExportedData> RegisterAndScheduleDataExportWithHttpInfo (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData));
        /// <summary>
        /// View a data export
        /// </summary>
        /// <remarks>
        /// ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 ViewDataExportById (string dataType, string requestId, string apiToken = default(string));

        /// <summary>
        /// View a data export
        /// </summary>
        /// <remarks>
        /// ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> ViewDataExportByIdWithHttpInfo (string dataType, string requestId, string apiToken = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List data exports by message, channel, or user
        /// </summary>
        /// <remarks>
        /// ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20063</returns>
        System.Threading.Tasks.Task<InlineResponse20063> ListDataExportsByMessageChannelOrUserAsync (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List data exports by message, channel, or user
        /// </summary>
        /// <remarks>
        /// ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> ListDataExportsByMessageChannelOrUserWithHttpInfoAsync (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register and schedule a data export
        /// </summary>
        /// <remarks>
        /// ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20063ExportedData</returns>
        System.Threading.Tasks.Task<InlineResponse20063ExportedData> RegisterAndScheduleDataExportAsync (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register and schedule a data export
        /// </summary>
        /// <remarks>
        /// ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20063ExportedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20063ExportedData>> RegisterAndScheduleDataExportWithHttpInfoAsync (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// View a data export
        /// </summary>
        /// <remarks>
        /// ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> ViewDataExportByIdAsync (string dataType, string requestId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View a data export
        /// </summary>
        /// <remarks>
        /// ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> ViewDataExportByIdWithHttpInfoAsync (string dataType, string requestId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataExportApi : IDataExportApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataExportApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExportApi"/> class
        /// </summary>
        /// <returns></returns>
        public DataExportApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataExportApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List data exports by message, channel, or user ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>InlineResponse20063</returns>
        public InlineResponse20063 ListDataExportsByMessageChannelOrUser (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
             ApiResponse<InlineResponse20063> localVarResponse = ListDataExportsByMessageChannelOrUserWithHttpInfo(dataType, apiToken, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List data exports by message, channel, or user ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        public ApiResponse<InlineResponse20063> ListDataExportsByMessageChannelOrUserWithHttpInfo (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->ListDataExportsByMessageChannelOrUser");

            var localVarPath = "/v3/export/{data_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDataExportsByMessageChannelOrUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063)));
        }

        /// <summary>
        /// List data exports by message, channel, or user ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20063</returns>
        public async System.Threading.Tasks.Task<InlineResponse20063> ListDataExportsByMessageChannelOrUserAsync (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20063> localVarResponse = await ListDataExportsByMessageChannelOrUserWithHttpInfoAsync(dataType, apiToken, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List data exports by message, channel, or user ## List data exports by message, channel, or user  Retrieves a list of message, channel or user data exports  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-list-data-exports-by-message,-channel,-or-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a data export to retrieve. Acceptable values are messages, channels, users, and failed_webhooks.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> ListDataExportsByMessageChannelOrUserWithHttpInfoAsync (string dataType, string apiToken = default(string), string token = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->ListDataExportsByMessageChannelOrUser");

            var localVarPath = "/v3/export/{data_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDataExportsByMessageChannelOrUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063)));
        }

        /// <summary>
        /// Register and schedule a data export ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <returns>InlineResponse20063ExportedData</returns>
        public InlineResponse20063ExportedData RegisterAndScheduleDataExport (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData))
        {
             ApiResponse<InlineResponse20063ExportedData> localVarResponse = RegisterAndScheduleDataExportWithHttpInfo(dataType, apiToken, registerAndScheduleDataExportData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register and schedule a data export ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063ExportedData</returns>
        public ApiResponse<InlineResponse20063ExportedData> RegisterAndScheduleDataExportWithHttpInfo (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->RegisterAndScheduleDataExport");

            var localVarPath = "/v3/export/{data_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAndScheduleDataExportData != null && registerAndScheduleDataExportData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAndScheduleDataExportData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAndScheduleDataExportData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAndScheduleDataExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063ExportedData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063ExportedData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063ExportedData)));
        }

        /// <summary>
        /// Register and schedule a data export ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20063ExportedData</returns>
        public async System.Threading.Tasks.Task<InlineResponse20063ExportedData> RegisterAndScheduleDataExportAsync (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20063ExportedData> localVarResponse = await RegisterAndScheduleDataExportWithHttpInfoAsync(dataType, apiToken, registerAndScheduleDataExportData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register and schedule a data export ## Register and schedule a data export  Registers and schedules a message, channel, or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-register-and-schedule-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerAndScheduleDataExportData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20063ExportedData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20063ExportedData>> RegisterAndScheduleDataExportWithHttpInfoAsync (string dataType, string apiToken = default(string), RegisterAndScheduleDataExportData registerAndScheduleDataExportData = default(RegisterAndScheduleDataExportData), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->RegisterAndScheduleDataExport");

            var localVarPath = "/v3/export/{data_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAndScheduleDataExportData != null && registerAndScheduleDataExportData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAndScheduleDataExportData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAndScheduleDataExportData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAndScheduleDataExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063ExportedData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063ExportedData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063ExportedData)));
        }

        /// <summary>
        /// View a data export ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 ViewDataExportById (string dataType, string requestId, string apiToken = default(string))
        {
             ApiResponse<InlineResponse20064> localVarResponse = ViewDataExportByIdWithHttpInfo(dataType, requestId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a data export ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public ApiResponse<InlineResponse20064> ViewDataExportByIdWithHttpInfo (string dataType, string requestId, string apiToken = default(string))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->ViewDataExportById");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling DataExportApi->ViewDataExportById");

            var localVarPath = "/v3/export/{data_type}/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDataExportById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

        /// <summary>
        /// View a data export ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064> ViewDataExportByIdAsync (string dataType, string requestId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse20064> localVarResponse = await ViewDataExportByIdWithHttpInfoAsync(dataType, requestId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a data export ## View a data export  Retrieves information on a message, channel or user data export.  https://sendbird.com/docs/chat/v3/platform-api/guides/data-export#2-view-a-data-export - -- -- -- -- -- -- -- -- -- -- -- -- -- -   &#x60;data_type&#x60;      Type: string      Description: Specifies the type of a targeted data export. Acceptable values are messages, channels,  users, and failed_webhooks.  &#x60;request_id&#x60;      Type: string      Description: Specifies the unique ID of a data export to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType"></param>
        /// <param name="requestId"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> ViewDataExportByIdWithHttpInfoAsync (string dataType, string requestId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dataType' is set
            if (dataType == null)
                throw new ApiException(400, "Missing required parameter 'dataType' when calling DataExportApi->ViewDataExportById");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling DataExportApi->ViewDataExportById");

            var localVarPath = "/v3/export/{data_type}/{request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarPathParams.Add("data_type", this.Configuration.ApiClient.ParameterToString(dataType)); // path parameter
            if (requestId != null) localVarPathParams.Add("request_id", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDataExportById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

    }
}
