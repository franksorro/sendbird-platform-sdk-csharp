/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// V3ApplicationsSettingsGlobalCustomTypeImageModeration
    /// </summary>
    [DataContract]
    public partial class V3ApplicationsSettingsGlobalCustomTypeImageModeration :  IEquatable<V3ApplicationsSettingsGlobalCustomTypeImageModeration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3ApplicationsSettingsGlobalCustomTypeImageModeration" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="softBlock">softBlock.</param>
        /// <param name="limits">limits.</param>
        /// <param name="checkUrls">checkUrls.</param>
        public V3ApplicationsSettingsGlobalCustomTypeImageModeration(int type = default(int), bool softBlock = default(bool), V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits limits = default(V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits), bool checkUrls = default(bool))
        {
            this.Type = type;
            this.SoftBlock = softBlock;
            this.Limits = limits;
            this.CheckUrls = checkUrls;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int Type { get; set; }

        /// <summary>
        /// Gets or Sets SoftBlock
        /// </summary>
        [DataMember(Name="soft_block", EmitDefaultValue=false)]
        public bool SoftBlock { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public V3ApplicationsSettingsGlobalCustomTypeImageModerationLimits Limits { get; set; }

        /// <summary>
        /// Gets or Sets CheckUrls
        /// </summary>
        [DataMember(Name="check_urls", EmitDefaultValue=false)]
        public bool CheckUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3ApplicationsSettingsGlobalCustomTypeImageModeration {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SoftBlock: ").Append(SoftBlock).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  CheckUrls: ").Append(CheckUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3ApplicationsSettingsGlobalCustomTypeImageModeration);
        }

        /// <summary>
        /// Returns true if V3ApplicationsSettingsGlobalCustomTypeImageModeration instances are equal
        /// </summary>
        /// <param name="input">Instance of V3ApplicationsSettingsGlobalCustomTypeImageModeration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3ApplicationsSettingsGlobalCustomTypeImageModeration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SoftBlock == input.SoftBlock ||
                    (this.SoftBlock != null &&
                    this.SoftBlock.Equals(input.SoftBlock))
                ) && 
                (
                    this.Limits == input.Limits ||
                    (this.Limits != null &&
                    this.Limits.Equals(input.Limits))
                ) && 
                (
                    this.CheckUrls == input.CheckUrls ||
                    (this.CheckUrls != null &&
                    this.CheckUrls.Equals(input.CheckUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SoftBlock != null)
                    hashCode = hashCode * 59 + this.SoftBlock.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.CheckUrls != null)
                    hashCode = hashCode * 59 + this.CheckUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
