/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SetDomainFilterDataImageModerationLimits
    /// </summary>
    [DataContract]
    public partial class SetDomainFilterDataImageModerationLimits :  IEquatable<SetDomainFilterDataImageModerationLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetDomainFilterDataImageModerationLimits" /> class.
        /// </summary>
        /// <param name="adult">adult.</param>
        /// <param name="spoof">spoof.</param>
        /// <param name="medical">medical.</param>
        /// <param name="violence">violence.</param>
        /// <param name="racy">racy.</param>
        public SetDomainFilterDataImageModerationLimits(int adult = default(int), int spoof = default(int), int medical = default(int), int violence = default(int), int racy = default(int))
        {
            this.Adult = adult;
            this.Spoof = spoof;
            this.Medical = medical;
            this.Violence = violence;
            this.Racy = racy;
        }

        /// <summary>
        /// Gets or Sets Adult
        /// </summary>
        [DataMember(Name="adult", EmitDefaultValue=false)]
        public int Adult { get; set; }

        /// <summary>
        /// Gets or Sets Spoof
        /// </summary>
        [DataMember(Name="spoof", EmitDefaultValue=false)]
        public int Spoof { get; set; }

        /// <summary>
        /// Gets or Sets Medical
        /// </summary>
        [DataMember(Name="medical", EmitDefaultValue=false)]
        public int Medical { get; set; }

        /// <summary>
        /// Gets or Sets Violence
        /// </summary>
        [DataMember(Name="violence", EmitDefaultValue=false)]
        public int Violence { get; set; }

        /// <summary>
        /// Gets or Sets Racy
        /// </summary>
        [DataMember(Name="racy", EmitDefaultValue=false)]
        public int Racy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetDomainFilterDataImageModerationLimits {\n");
            sb.Append("  Adult: ").Append(Adult).Append("\n");
            sb.Append("  Spoof: ").Append(Spoof).Append("\n");
            sb.Append("  Medical: ").Append(Medical).Append("\n");
            sb.Append("  Violence: ").Append(Violence).Append("\n");
            sb.Append("  Racy: ").Append(Racy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetDomainFilterDataImageModerationLimits);
        }

        /// <summary>
        /// Returns true if SetDomainFilterDataImageModerationLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of SetDomainFilterDataImageModerationLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetDomainFilterDataImageModerationLimits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adult == input.Adult ||
                    (this.Adult != null &&
                    this.Adult.Equals(input.Adult))
                ) && 
                (
                    this.Spoof == input.Spoof ||
                    (this.Spoof != null &&
                    this.Spoof.Equals(input.Spoof))
                ) && 
                (
                    this.Medical == input.Medical ||
                    (this.Medical != null &&
                    this.Medical.Equals(input.Medical))
                ) && 
                (
                    this.Violence == input.Violence ||
                    (this.Violence != null &&
                    this.Violence.Equals(input.Violence))
                ) && 
                (
                    this.Racy == input.Racy ||
                    (this.Racy != null &&
                    this.Racy.Equals(input.Racy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adult != null)
                    hashCode = hashCode * 59 + this.Adult.GetHashCode();
                if (this.Spoof != null)
                    hashCode = hashCode * 59 + this.Spoof.GetHashCode();
                if (this.Medical != null)
                    hashCode = hashCode * 59 + this.Medical.GetHashCode();
                if (this.Violence != null)
                    hashCode = hashCode * 59 + this.Violence.GetHashCode();
                if (this.Racy != null)
                    hashCode = hashCode * 59 + this.Racy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
